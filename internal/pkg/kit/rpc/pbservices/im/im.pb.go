// proto 文件版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.14.0
// source: im.proto

// 生成文件的包名

package im

import (
	common "baby-fried-rice/internal/pkg/kit/rpc/pbservices/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 会话类型
type SessionType int32

const (
	// 双人会话
	SessionType_DoubleSession SessionType = 0
	// 多人讨论组会话
	SessionType_MultiSession SessionType = 1
	// 群会话
	SessionType_GroupSession SessionType = 2
	// 官方群会话
	SessionType_OfficialSession SessionType = 3
)

// Enum value maps for SessionType.
var (
	SessionType_name = map[int32]string{
		0: "DoubleSession",
		1: "MultiSession",
		2: "GroupSession",
		3: "OfficialSession",
	}
	SessionType_value = map[string]int32{
		"DoubleSession":   0,
		"MultiSession":    1,
		"GroupSession":    2,
		"OfficialSession": 3,
	}
)

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[0].Descriptor()
}

func (SessionType) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[0]
}

func (x SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionType.Descriptor instead.
func (SessionType) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{0}
}

// 会话等级
type SessionLevel int32

const (
	// 基础会话级别(仅2人)
	SessionLevel_SessionBaseLevel SessionLevel = 0
	// 普通会话级别(2~20)
	SessionLevel_SessionNormalLevel SessionLevel = 1
	// 小型群会话级别(2~100)
	SessionLevel_SessionSmallGroupLevel SessionLevel = 101
	// 中型群会话级别(2~300)
	SessionLevel_SessionMediumGroupLevel SessionLevel = 102
	// 大型群会话级别(2~500)
	SessionLevel_SessionLargeGroupLevel SessionLevel = 103
	// 总群会话级别(无上限)
	SessionLevel_SessionTotalGroupLevel SessionLevel = 1000
)

// Enum value maps for SessionLevel.
var (
	SessionLevel_name = map[int32]string{
		0:    "SessionBaseLevel",
		1:    "SessionNormalLevel",
		101:  "SessionSmallGroupLevel",
		102:  "SessionMediumGroupLevel",
		103:  "SessionLargeGroupLevel",
		1000: "SessionTotalGroupLevel",
	}
	SessionLevel_value = map[string]int32{
		"SessionBaseLevel":        0,
		"SessionNormalLevel":      1,
		"SessionSmallGroupLevel":  101,
		"SessionMediumGroupLevel": 102,
		"SessionLargeGroupLevel":  103,
		"SessionTotalGroupLevel":  1000,
	}
)

func (x SessionLevel) Enum() *SessionLevel {
	p := new(SessionLevel)
	*p = x
	return p
}

func (x SessionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[1].Descriptor()
}

func (SessionLevel) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[1]
}

func (x SessionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionLevel.Descriptor instead.
func (SessionLevel) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{1}
}

// 会话加入权限
type SessionJoinPermissionType int32

const (
	// 无限制
	SessionJoinPermissionType_NoneLimit SessionJoinPermissionType = 0
	// 邀请加入
	SessionJoinPermissionType_InviteJoin SessionJoinPermissionType = 1
	// 创建者审核
	SessionJoinPermissionType_OriginAudit SessionJoinPermissionType = 2
)

// Enum value maps for SessionJoinPermissionType.
var (
	SessionJoinPermissionType_name = map[int32]string{
		0: "NoneLimit",
		1: "InviteJoin",
		2: "OriginAudit",
	}
	SessionJoinPermissionType_value = map[string]int32{
		"NoneLimit":   0,
		"InviteJoin":  1,
		"OriginAudit": 2,
	}
)

func (x SessionJoinPermissionType) Enum() *SessionJoinPermissionType {
	p := new(SessionJoinPermissionType)
	*p = x
	return p
}

func (x SessionJoinPermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionJoinPermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[2].Descriptor()
}

func (SessionJoinPermissionType) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[2]
}

func (x SessionJoinPermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionJoinPermissionType.Descriptor instead.
func (SessionJoinPermissionType) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{2}
}

// 会话消息类型
type SessionMessageType int32

const (
	SessionMessageType_TextMessage SessionMessageType = 0
	SessionMessageType_FileMessage SessionMessageType = 1
	SessionMessageType_ImgMessage  SessionMessageType = 2
)

// Enum value maps for SessionMessageType.
var (
	SessionMessageType_name = map[int32]string{
		0: "TextMessage",
		1: "FileMessage",
		2: "ImgMessage",
	}
	SessionMessageType_value = map[string]int32{
		"TextMessage": 0,
		"FileMessage": 1,
		"ImgMessage":  2,
	}
)

func (x SessionMessageType) Enum() *SessionMessageType {
	p := new(SessionMessageType)
	*p = x
	return p
}

func (x SessionMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[3].Descriptor()
}

func (SessionMessageType) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[3]
}

func (x SessionMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMessageType.Descriptor instead.
func (SessionMessageType) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{3}
}

// 操作类型
type OptType int32

const (
	// 无操作
	OptType_NoOpt OptType = 0
	// 请求添加为好友
	OptType_AddFriend OptType = 1
	// 请求加入会话
	OptType_JoinSession OptType = 2
)

// Enum value maps for OptType.
var (
	OptType_name = map[int32]string{
		0: "NoOpt",
		1: "AddFriend",
		2: "JoinSession",
	}
	OptType_value = map[string]int32{
		"NoOpt":       0,
		"AddFriend":   1,
		"JoinSession": 2,
	}
)

func (x OptType) Enum() *OptType {
	p := new(OptType)
	*p = x
	return p
}

func (x OptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[4].Descriptor()
}

func (OptType) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[4]
}

func (x OptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptType.Descriptor instead.
func (OptType) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{4}
}

type AddFriendPermissionType int32

const (
	// 无限制
	AddFriendPermissionType_NoLimit AddFriendPermissionType = 0
	// 确认添加
	AddFriendPermissionType_Confirm AddFriendPermissionType = 1
)

// Enum value maps for AddFriendPermissionType.
var (
	AddFriendPermissionType_name = map[int32]string{
		0: "NoLimit",
		1: "Confirm",
	}
	AddFriendPermissionType_value = map[string]int32{
		"NoLimit": 0,
		"Confirm": 1,
	}
)

func (x AddFriendPermissionType) Enum() *AddFriendPermissionType {
	p := new(AddFriendPermissionType)
	*p = x
	return p
}

func (x AddFriendPermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddFriendPermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[5].Descriptor()
}

func (AddFriendPermissionType) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[5]
}

func (x AddFriendPermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddFriendPermissionType.Descriptor instead.
func (AddFriendPermissionType) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{5}
}

// 会话创建
type ReqSessionAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话类型
	SessionType SessionType `protobuf:"varint,1,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 会话加入限制
	JoinPermissionType SessionJoinPermissionType `protobuf:"varint,2,opt,name=joinPermissionType,proto3,enum=im.SessionJoinPermissionType" json:"joinPermissionType,omitempty"`
	// 会话名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话创建者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 会话加入人员
	Joins []*JoinRemarkDao `protobuf:"bytes,5,rep,name=joins,proto3" json:"joins,omitempty"`
	// 会话创建等级
	Level SessionLevel `protobuf:"varint,6,opt,name=level,proto3,enum=im.SessionLevel" json:"level,omitempty"`
}

func (x *ReqSessionAddDao) Reset() {
	*x = ReqSessionAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionAddDao) ProtoMessage() {}

func (x *ReqSessionAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionAddDao.ProtoReflect.Descriptor instead.
func (*ReqSessionAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{0}
}

func (x *ReqSessionAddDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *ReqSessionAddDao) GetJoinPermissionType() SessionJoinPermissionType {
	if x != nil {
		return x.JoinPermissionType
	}
	return SessionJoinPermissionType_NoneLimit
}

func (x *ReqSessionAddDao) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqSessionAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqSessionAddDao) GetJoins() []*JoinRemarkDao {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *ReqSessionAddDao) GetLevel() SessionLevel {
	if x != nil {
		return x.Level
	}
	return SessionLevel_SessionBaseLevel
}

// 会话创建返回
type RspSessionAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId int64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *RspSessionAddDao) Reset() {
	*x = RspSessionAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSessionAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSessionAddDao) ProtoMessage() {}

func (x *RspSessionAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSessionAddDao.ProtoReflect.Descriptor instead.
func (*RspSessionAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{1}
}

func (x *RspSessionAddDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type ReqSessionUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId int64 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 会话类型
	SessionType SessionType `protobuf:"varint,2,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 会话加入限制
	JoinPermissionType SessionJoinPermissionType `protobuf:"varint,3,opt,name=joinPermissionType,proto3,enum=im.SessionJoinPermissionType" json:"joinPermissionType,omitempty"`
	// 会话名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 操作者
	AccountId string `protobuf:"bytes,5,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqSessionUpdateDao) Reset() {
	*x = ReqSessionUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionUpdateDao) ProtoMessage() {}

func (x *ReqSessionUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqSessionUpdateDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{2}
}

func (x *ReqSessionUpdateDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionUpdateDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *ReqSessionUpdateDao) GetJoinPermissionType() SessionJoinPermissionType {
	if x != nil {
		return x.JoinPermissionType
	}
	return SessionJoinPermissionType_NoneLimit
}

func (x *ReqSessionUpdateDao) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqSessionUpdateDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// 会话备注信息修改
type ReqSessionRemarkUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId int64  `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Remark    string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *ReqSessionRemarkUpdateDao) Reset() {
	*x = ReqSessionRemarkUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionRemarkUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionRemarkUpdateDao) ProtoMessage() {}

func (x *ReqSessionRemarkUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionRemarkUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqSessionRemarkUpdateDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{3}
}

func (x *ReqSessionRemarkUpdateDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionRemarkUpdateDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionRemarkUpdateDao) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 会话查询
type ReqSessionQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonSearchReq *common.CommonSearchRequest `protobuf:"bytes,1,opt,name=commonSearchReq,proto3" json:"commonSearchReq,omitempty"`
	// 会话id
	SessionId int64 `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 会话类型
	SessionType SessionType `protobuf:"varint,3,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 创建者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 查询者
	AccountId string `protobuf:"bytes,5,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// 按照最新消息时间排序
	LatestMessageTimeOrderBy bool `protobuf:"varint,6,opt,name=latestMessageTimeOrderBy,proto3" json:"latestMessageTimeOrderBy,omitempty"`
}

func (x *ReqSessionQueryDao) Reset() {
	*x = ReqSessionQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionQueryDao) ProtoMessage() {}

func (x *ReqSessionQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionQueryDao.ProtoReflect.Descriptor instead.
func (*ReqSessionQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{4}
}

func (x *ReqSessionQueryDao) GetCommonSearchReq() *common.CommonSearchRequest {
	if x != nil {
		return x.CommonSearchReq
	}
	return nil
}

func (x *ReqSessionQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionQueryDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *ReqSessionQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqSessionQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionQueryDao) GetLatestMessageTimeOrderBy() bool {
	if x != nil {
		return x.LatestMessageTimeOrderBy
	}
	return false
}

type RspSessionQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*SessionQueryDao `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Page     int64              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RspSessionQueryDao) Reset() {
	*x = RspSessionQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSessionQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSessionQueryDao) ProtoMessage() {}

func (x *RspSessionQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSessionQueryDao.ProtoReflect.Descriptor instead.
func (*RspSessionQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{5}
}

func (x *RspSessionQueryDao) GetSessions() []*SessionQueryDao {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *RspSessionQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspSessionQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 会话信息
type SessionQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话id
	SessionId int64 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 会话类型
	SessionType SessionType `protobuf:"varint,2,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 会话名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话等级
	Level SessionLevel `protobuf:"varint,4,opt,name=level,proto3,enum=im.SessionLevel" json:"level,omitempty"`
	// 未读消息数
	Unread int64 `protobuf:"varint,5,opt,name=unread,proto3" json:"unread,omitempty"`
	// 最近一条消息内容
	Latest *SessionMessageDao `protobuf:"bytes,6,opt,name=latest,proto3" json:"latest,omitempty"`
}

func (x *SessionQueryDao) Reset() {
	*x = SessionQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryDao) ProtoMessage() {}

func (x *SessionQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryDao.ProtoReflect.Descriptor instead.
func (*SessionQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{6}
}

func (x *SessionQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionQueryDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *SessionQueryDao) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionQueryDao) GetLevel() SessionLevel {
	if x != nil {
		return x.Level
	}
	return SessionLevel_SessionBaseLevel
}

func (x *SessionQueryDao) GetUnread() int64 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *SessionQueryDao) GetLatest() *SessionMessageDao {
	if x != nil {
		return x.Latest
	}
	return nil
}

// 会话详细信息
type SessionDetailQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话id
	SessionId int64 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 会话类型
	SessionType SessionType `protobuf:"varint,2,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 会话名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话等级
	Level SessionLevel `protobuf:"varint,4,opt,name=level,proto3,enum=im.SessionLevel" json:"level,omitempty"`
	// 会话创建者
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// 会话加入人员
	Joins []*JoinRemarkDao `protobuf:"bytes,6,rep,name=joins,proto3" json:"joins,omitempty"`
	// 会话加入权限
	JoinPermissionType SessionJoinPermissionType `protobuf:"varint,7,opt,name=joinPermissionType,proto3,enum=im.SessionJoinPermissionType" json:"joinPermissionType,omitempty"`
	// 会话创建时间
	CreateTime int64 `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *SessionDetailQueryDao) Reset() {
	*x = SessionDetailQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDetailQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDetailQueryDao) ProtoMessage() {}

func (x *SessionDetailQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDetailQueryDao.ProtoReflect.Descriptor instead.
func (*SessionDetailQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{7}
}

func (x *SessionDetailQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionDetailQueryDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *SessionDetailQueryDao) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionDetailQueryDao) GetLevel() SessionLevel {
	if x != nil {
		return x.Level
	}
	return SessionLevel_SessionBaseLevel
}

func (x *SessionDetailQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *SessionDetailQueryDao) GetJoins() []*JoinRemarkDao {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *SessionDetailQueryDao) GetJoinPermissionType() SessionJoinPermissionType {
	if x != nil {
		return x.JoinPermissionType
	}
	return SessionJoinPermissionType_NoneLimit
}

func (x *SessionDetailQueryDao) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type JoinRemarkDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Remark    string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *JoinRemarkDao) Reset() {
	*x = JoinRemarkDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRemarkDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRemarkDao) ProtoMessage() {}

func (x *JoinRemarkDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRemarkDao.ProtoReflect.Descriptor instead.
func (*JoinRemarkDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{8}
}

func (x *JoinRemarkDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *JoinRemarkDao) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 查询会话详情
type ReqSessionDetailQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId int64  `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *ReqSessionDetailQueryDao) Reset() {
	*x = ReqSessionDetailQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionDetailQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionDetailQueryDao) ProtoMessage() {}

func (x *ReqSessionDetailQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionDetailQueryDao.ProtoReflect.Descriptor instead.
func (*ReqSessionDetailQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{9}
}

func (x *ReqSessionDetailQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionDetailQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RspSessionDetailQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话id
	SessionId int64 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 会话类型
	SessionType SessionType `protobuf:"varint,2,opt,name=sessionType,proto3,enum=im.SessionType" json:"sessionType,omitempty"`
	// 会话名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 会话等级
	Level SessionLevel `protobuf:"varint,4,opt,name=level,proto3,enum=im.SessionLevel" json:"level,omitempty"`
	// 会话创建者
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// 会话加入人员
	Joins []*JoinRemarkDao `protobuf:"bytes,6,rep,name=joins,proto3" json:"joins,omitempty"`
	// 会话加入权限
	JoinPermissionType SessionJoinPermissionType `protobuf:"varint,7,opt,name=joinPermissionType,proto3,enum=im.SessionJoinPermissionType" json:"joinPermissionType,omitempty"`
	// 会话创建时间
	CreateTime int64 `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *RspSessionDetailQueryDao) Reset() {
	*x = RspSessionDetailQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSessionDetailQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSessionDetailQueryDao) ProtoMessage() {}

func (x *RspSessionDetailQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSessionDetailQueryDao.ProtoReflect.Descriptor instead.
func (*RspSessionDetailQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{10}
}

func (x *RspSessionDetailQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *RspSessionDetailQueryDao) GetSessionType() SessionType {
	if x != nil {
		return x.SessionType
	}
	return SessionType_DoubleSession
}

func (x *RspSessionDetailQueryDao) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RspSessionDetailQueryDao) GetLevel() SessionLevel {
	if x != nil {
		return x.Level
	}
	return SessionLevel_SessionBaseLevel
}

func (x *RspSessionDetailQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *RspSessionDetailQueryDao) GetJoins() []*JoinRemarkDao {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *RspSessionDetailQueryDao) GetJoinPermissionType() SessionJoinPermissionType {
	if x != nil {
		return x.JoinPermissionType
	}
	return SessionJoinPermissionType_NoneLimit
}

func (x *RspSessionDetailQueryDao) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 加入会话
type ReqSessionJoinDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 操作id
	OperatorId int64 `protobuf:"varint,3,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
}

func (x *ReqSessionJoinDao) Reset() {
	*x = ReqSessionJoinDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionJoinDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionJoinDao) ProtoMessage() {}

func (x *ReqSessionJoinDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionJoinDao.ProtoReflect.Descriptor instead.
func (*ReqSessionJoinDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{11}
}

func (x *ReqSessionJoinDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionJoinDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionJoinDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 离开会话
type ReqSessionLeaveDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqSessionLeaveDao) Reset() {
	*x = ReqSessionLeaveDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionLeaveDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionLeaveDao) ProtoMessage() {}

func (x *ReqSessionLeaveDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionLeaveDao.ProtoReflect.Descriptor instead.
func (*ReqSessionLeaveDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{12}
}

func (x *ReqSessionLeaveDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionLeaveDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 邀请加入会话
type ReqSessionInviteJoinDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqSessionInviteJoinDao) Reset() {
	*x = ReqSessionInviteJoinDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionInviteJoinDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionInviteJoinDao) ProtoMessage() {}

func (x *ReqSessionInviteJoinDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionInviteJoinDao.ProtoReflect.Descriptor instead.
func (*ReqSessionInviteJoinDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{13}
}

func (x *ReqSessionInviteJoinDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqSessionInviteJoinDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionInviteJoinDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 从会话中移除
type ReqSessionRemoveDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqSessionRemoveDao) Reset() {
	*x = ReqSessionRemoveDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionRemoveDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionRemoveDao) ProtoMessage() {}

func (x *ReqSessionRemoveDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionRemoveDao.ProtoReflect.Descriptor instead.
func (*ReqSessionRemoveDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{14}
}

func (x *ReqSessionRemoveDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqSessionRemoveDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionRemoveDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 删除会话(解散会话)
type ReqSessionDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqSessionDeleteDao) Reset() {
	*x = ReqSessionDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionDeleteDao) ProtoMessage() {}

func (x *ReqSessionDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionDeleteDao.ProtoReflect.Descriptor instead.
func (*ReqSessionDeleteDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{15}
}

func (x *ReqSessionDeleteDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionDeleteDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 会话消息
type SessionMessageDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话id
	SessionId int64 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 消息id
	MessageId int64 `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// 消息类型
	MessageType SessionMessageType `protobuf:"varint,3,opt,name=messageType,proto3,enum=im.SessionMessageType" json:"messageType,omitempty"`
	// 消息发送者
	Send *JoinRemarkDao `protobuf:"bytes,4,opt,name=send,proto3" json:"send,omitempty"`
	// 消息接收者
	Receive string `protobuf:"bytes,5,opt,name=receive,proto3" json:"receive,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 创建时间
	SendTimestamp int64 `protobuf:"varint,7,opt,name=sendTimestamp,proto3" json:"sendTimestamp,omitempty"`
	// 读取状态 0-未读 1-已读
	ReadStatus bool `protobuf:"varint,8,opt,name=readStatus,proto3" json:"readStatus,omitempty"`
}

func (x *SessionMessageDao) Reset() {
	*x = SessionMessageDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMessageDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMessageDao) ProtoMessage() {}

func (x *SessionMessageDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMessageDao.ProtoReflect.Descriptor instead.
func (*SessionMessageDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{16}
}

func (x *SessionMessageDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionMessageDao) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SessionMessageDao) GetMessageType() SessionMessageType {
	if x != nil {
		return x.MessageType
	}
	return SessionMessageType_TextMessage
}

func (x *SessionMessageDao) GetSend() *JoinRemarkDao {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *SessionMessageDao) GetReceive() string {
	if x != nil {
		return x.Receive
	}
	return ""
}

func (x *SessionMessageDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SessionMessageDao) GetSendTimestamp() int64 {
	if x != nil {
		return x.SendTimestamp
	}
	return 0
}

func (x *SessionMessageDao) GetReadStatus() bool {
	if x != nil {
		return x.ReadStatus
	}
	return false
}

// 会话消息添加
type ReqSessionMessageAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	MessageType SessionMessageType `protobuf:"varint,2,opt,name=messageType,proto3,enum=im.SessionMessageType" json:"messageType,omitempty"`
	// 消息发送者
	Send string `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	// 会话id
	SessionId int64 `protobuf:"varint,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 发送时间
	SendTimestamp int64 `protobuf:"varint,6,opt,name=sendTimestamp,proto3" json:"sendTimestamp,omitempty"`
}

func (x *ReqSessionMessageAddDao) Reset() {
	*x = ReqSessionMessageAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionMessageAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionMessageAddDao) ProtoMessage() {}

func (x *ReqSessionMessageAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionMessageAddDao.ProtoReflect.Descriptor instead.
func (*ReqSessionMessageAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{17}
}

func (x *ReqSessionMessageAddDao) GetMessageType() SessionMessageType {
	if x != nil {
		return x.MessageType
	}
	return SessionMessageType_TextMessage
}

func (x *ReqSessionMessageAddDao) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *ReqSessionMessageAddDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionMessageAddDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReqSessionMessageAddDao) GetSendTimestamp() int64 {
	if x != nil {
		return x.SendTimestamp
	}
	return 0
}

// 会话消息查询
type ReqSessionMessageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SessionId int64  `protobuf:"varint,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Date      string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	AccountId string `protobuf:"bytes,5,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqSessionMessageQueryDao) Reset() {
	*x = ReqSessionMessageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionMessageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionMessageQueryDao) ProtoMessage() {}

func (x *ReqSessionMessageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionMessageQueryDao.ProtoReflect.Descriptor instead.
func (*ReqSessionMessageQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{18}
}

func (x *ReqSessionMessageQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqSessionMessageQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqSessionMessageQueryDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionMessageQueryDao) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqSessionMessageQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RspSessionMessageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*SessionMessageDao `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Page     int64                `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RspSessionMessageQueryDao) Reset() {
	*x = RspSessionMessageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSessionMessageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSessionMessageQueryDao) ProtoMessage() {}

func (x *RspSessionMessageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSessionMessageQueryDao.ProtoReflect.Descriptor instead.
func (*RspSessionMessageQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{19}
}

func (x *RspSessionMessageQueryDao) GetMessages() []*SessionMessageDao {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RspSessionMessageQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspSessionMessageQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 会话消息读取状态更新
type ReqSessionMessageReadStatusUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId  int64   `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	MessageIds []int64 `protobuf:"varint,3,rep,packed,name=messageIds,proto3" json:"messageIds,omitempty"`
}

func (x *ReqSessionMessageReadStatusUpdateDao) Reset() {
	*x = ReqSessionMessageReadStatusUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionMessageReadStatusUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionMessageReadStatusUpdateDao) ProtoMessage() {}

func (x *ReqSessionMessageReadStatusUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionMessageReadStatusUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqSessionMessageReadStatusUpdateDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{20}
}

func (x *ReqSessionMessageReadStatusUpdateDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionMessageReadStatusUpdateDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionMessageReadStatusUpdateDao) GetMessageIds() []int64 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// 会话消息删除
type ReqSessionMessageDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId  int64   `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	MessageIds []int64 `protobuf:"varint,3,rep,packed,name=messageIds,proto3" json:"messageIds,omitempty"`
}

func (x *ReqSessionMessageDeleteDao) Reset() {
	*x = ReqSessionMessageDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionMessageDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionMessageDeleteDao) ProtoMessage() {}

func (x *ReqSessionMessageDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionMessageDeleteDao.ProtoReflect.Descriptor instead.
func (*ReqSessionMessageDeleteDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{21}
}

func (x *ReqSessionMessageDeleteDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionMessageDeleteDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqSessionMessageDeleteDao) GetMessageIds() []int64 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// 清空会话消息
type ReqSessionMessageFlushDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SessionId int64  `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqSessionMessageFlushDao) Reset() {
	*x = ReqSessionMessageFlushDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSessionMessageFlushDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSessionMessageFlushDao) ProtoMessage() {}

func (x *ReqSessionMessageFlushDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSessionMessageFlushDao.ProtoReflect.Descriptor instead.
func (*ReqSessionMessageFlushDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{22}
}

func (x *ReqSessionMessageFlushDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqSessionMessageFlushDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 添加操作
type ReqOperatorAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin      string  `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Receive     string  `protobuf:"bytes,2,opt,name=receive,proto3" json:"receive,omitempty"`
	OptType     OptType `protobuf:"varint,3,opt,name=optType,proto3,enum=im.OptType" json:"optType,omitempty"`
	Content     string  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	NeedConfirm bool    `protobuf:"varint,5,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`
	SessionId   int64   `protobuf:"varint,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ReqOperatorAddDao) Reset() {
	*x = ReqOperatorAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorAddDao) ProtoMessage() {}

func (x *ReqOperatorAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorAddDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{23}
}

func (x *ReqOperatorAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqOperatorAddDao) GetReceive() string {
	if x != nil {
		return x.Receive
	}
	return ""
}

func (x *ReqOperatorAddDao) GetOptType() OptType {
	if x != nil {
		return x.OptType
	}
	return OptType_NoOpt
}

func (x *ReqOperatorAddDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReqOperatorAddDao) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *ReqOperatorAddDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type RspOperatorAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId int64 `protobuf:"varint,1,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
}

func (x *RspOperatorAddDao) Reset() {
	*x = RspOperatorAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOperatorAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOperatorAddDao) ProtoMessage() {}

func (x *RspOperatorAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOperatorAddDao.ProtoReflect.Descriptor instead.
func (*RspOperatorAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{24}
}

func (x *RspOperatorAddDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 操作确认
type ReqOperatorConfirmDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	OperatorId int64  `protobuf:"varint,2,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	Confirm    bool   `protobuf:"varint,3,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (x *ReqOperatorConfirmDao) Reset() {
	*x = ReqOperatorConfirmDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorConfirmDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorConfirmDao) ProtoMessage() {}

func (x *ReqOperatorConfirmDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorConfirmDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorConfirmDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{25}
}

func (x *ReqOperatorConfirmDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqOperatorConfirmDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ReqOperatorConfirmDao) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

// 更新操作读取状态
type ReqOperatorReadStatusUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	OperatorIds []int64 `protobuf:"varint,2,rep,packed,name=operatorIds,proto3" json:"operatorIds,omitempty"`
}

func (x *ReqOperatorReadStatusUpdateDao) Reset() {
	*x = ReqOperatorReadStatusUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorReadStatusUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorReadStatusUpdateDao) ProtoMessage() {}

func (x *ReqOperatorReadStatusUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorReadStatusUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorReadStatusUpdateDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{26}
}

func (x *ReqOperatorReadStatusUpdateDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqOperatorReadStatusUpdateDao) GetOperatorIds() []int64 {
	if x != nil {
		return x.OperatorIds
	}
	return nil
}

// 操作列表查询请求
type ReqOperatorsQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Page      int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ReqOperatorsQueryDao) Reset() {
	*x = ReqOperatorsQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorsQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorsQueryDao) ProtoMessage() {}

func (x *ReqOperatorsQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorsQueryDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorsQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{27}
}

func (x *ReqOperatorsQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqOperatorsQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqOperatorsQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 操作列表查询列表
type RspOperatorsQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*OperatorDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Page     int64          `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64          `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RspOperatorsQueryDao) Reset() {
	*x = RspOperatorsQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOperatorsQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOperatorsQueryDao) ProtoMessage() {}

func (x *RspOperatorsQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOperatorsQueryDao.ProtoReflect.Descriptor instead.
func (*RspOperatorsQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{28}
}

func (x *RspOperatorsQueryDao) GetList() []*OperatorDao {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspOperatorsQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspOperatorsQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RspOperatorsQueryDao) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 单个操作查询请求
type ReqOperatorSingleQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	OperatorId int64  `protobuf:"varint,2,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
}

func (x *ReqOperatorSingleQueryDao) Reset() {
	*x = ReqOperatorSingleQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorSingleQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorSingleQueryDao) ProtoMessage() {}

func (x *ReqOperatorSingleQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorSingleQueryDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorSingleQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{29}
}

func (x *ReqOperatorSingleQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqOperatorSingleQueryDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 操作列表结构
type OperatorDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Origin            string  `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Receive           string  `protobuf:"bytes,3,opt,name=receive,proto3" json:"receive,omitempty"`
	OptType           OptType `protobuf:"varint,4,opt,name=optType,proto3,enum=im.OptType" json:"optType,omitempty"`
	Content           string  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	NeedConfirm       bool    `protobuf:"varint,6,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`
	Confirm           int64   `protobuf:"varint,7,opt,name=confirm,proto3" json:"confirm,omitempty"`
	OptTimestamp      int64   `protobuf:"varint,8,opt,name=optTimestamp,proto3" json:"optTimestamp,omitempty"`
	ReceiveReadStatus bool    `protobuf:"varint,9,opt,name=receiveReadStatus,proto3" json:"receiveReadStatus,omitempty"`
	SessionId         int64   `protobuf:"varint,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *OperatorDao) Reset() {
	*x = OperatorDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorDao) ProtoMessage() {}

func (x *OperatorDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorDao.ProtoReflect.Descriptor instead.
func (*OperatorDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{30}
}

func (x *OperatorDao) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OperatorDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *OperatorDao) GetReceive() string {
	if x != nil {
		return x.Receive
	}
	return ""
}

func (x *OperatorDao) GetOptType() OptType {
	if x != nil {
		return x.OptType
	}
	return OptType_NoOpt
}

func (x *OperatorDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OperatorDao) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *OperatorDao) GetConfirm() int64 {
	if x != nil {
		return x.Confirm
	}
	return 0
}

func (x *OperatorDao) GetOptTimestamp() int64 {
	if x != nil {
		return x.OptTimestamp
	}
	return 0
}

func (x *OperatorDao) GetReceiveReadStatus() bool {
	if x != nil {
		return x.ReceiveReadStatus
	}
	return false
}

func (x *OperatorDao) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 操作信息删除
type ReqOperatorDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	OperatorId int64  `protobuf:"varint,2,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
}

func (x *ReqOperatorDeleteDao) Reset() {
	*x = ReqOperatorDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorDeleteDao) ProtoMessage() {}

func (x *ReqOperatorDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorDeleteDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorDeleteDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{31}
}

func (x *ReqOperatorDeleteDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqOperatorDeleteDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 添加好友请求
type ReqFriendAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Remark    string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	OriRemark string `protobuf:"bytes,4,opt,name=oriRemark,proto3" json:"oriRemark,omitempty"`
	// 操作id
	OperatorId int64 `protobuf:"varint,5,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *ReqFriendAddDao) Reset() {
	*x = ReqFriendAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFriendAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFriendAddDao) ProtoMessage() {}

func (x *ReqFriendAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFriendAddDao.ProtoReflect.Descriptor instead.
func (*ReqFriendAddDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{32}
}

func (x *ReqFriendAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqFriendAddDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqFriendAddDao) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ReqFriendAddDao) GetOriRemark() string {
	if x != nil {
		return x.OriRemark
	}
	return ""
}

func (x *ReqFriendAddDao) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 好友列表查询请求
type ReqFriendQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin     string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	RemarkLike string `protobuf:"bytes,2,opt,name=remarkLike,proto3" json:"remarkLike,omitempty"`
	BlackList  bool   `protobuf:"varint,3,opt,name=blackList,proto3" json:"blackList,omitempty"`
}

func (x *ReqFriendQueryDao) Reset() {
	*x = ReqFriendQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFriendQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFriendQueryDao) ProtoMessage() {}

func (x *ReqFriendQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFriendQueryDao.ProtoReflect.Descriptor instead.
func (*ReqFriendQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{33}
}

func (x *ReqFriendQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqFriendQueryDao) GetRemarkLike() string {
	if x != nil {
		return x.RemarkLike
	}
	return ""
}

func (x *ReqFriendQueryDao) GetBlackList() bool {
	if x != nil {
		return x.BlackList
	}
	return false
}

// 好友列表查询结果
type RspFriendQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FriendDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RspFriendQueryDao) Reset() {
	*x = RspFriendQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFriendQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFriendQueryDao) ProtoMessage() {}

func (x *RspFriendQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFriendQueryDao.ProtoReflect.Descriptor instead.
func (*RspFriendQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{34}
}

func (x *RspFriendQueryDao) GetList() []*FriendDao {
	if x != nil {
		return x.List
	}
	return nil
}

type FriendDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Remark    string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	BlackList bool   `protobuf:"varint,3,opt,name=blackList,proto3" json:"blackList,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *FriendDao) Reset() {
	*x = FriendDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendDao) ProtoMessage() {}

func (x *FriendDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendDao.ProtoReflect.Descriptor instead.
func (*FriendDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{35}
}

func (x *FriendDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FriendDao) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FriendDao) GetBlackList() bool {
	if x != nil {
		return x.BlackList
	}
	return false
}

func (x *FriendDao) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 好友黑名单操作
type ReqFriendBlackListDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Friend    string `protobuf:"bytes,2,opt,name=friend,proto3" json:"friend,omitempty"`
	BlackList bool   `protobuf:"varint,3,opt,name=blackList,proto3" json:"blackList,omitempty"`
}

func (x *ReqFriendBlackListDao) Reset() {
	*x = ReqFriendBlackListDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFriendBlackListDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFriendBlackListDao) ProtoMessage() {}

func (x *ReqFriendBlackListDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFriendBlackListDao.ProtoReflect.Descriptor instead.
func (*ReqFriendBlackListDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{36}
}

func (x *ReqFriendBlackListDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqFriendBlackListDao) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

func (x *ReqFriendBlackListDao) GetBlackList() bool {
	if x != nil {
		return x.BlackList
	}
	return false
}

// 修改好友备注
type ReqFriendRemarkDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Friend string `protobuf:"bytes,2,opt,name=friend,proto3" json:"friend,omitempty"`
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *ReqFriendRemarkDao) Reset() {
	*x = ReqFriendRemarkDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFriendRemarkDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFriendRemarkDao) ProtoMessage() {}

func (x *ReqFriendRemarkDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFriendRemarkDao.ProtoReflect.Descriptor instead.
func (*ReqFriendRemarkDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{37}
}

func (x *ReqFriendRemarkDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqFriendRemarkDao) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

func (x *ReqFriendRemarkDao) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 删除好友
type ReqFriendDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Friend string `protobuf:"bytes,2,opt,name=friend,proto3" json:"friend,omitempty"`
}

func (x *ReqFriendDeleteDao) Reset() {
	*x = ReqFriendDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFriendDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFriendDeleteDao) ProtoMessage() {}

func (x *ReqFriendDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFriendDeleteDao.ProtoReflect.Descriptor instead.
func (*ReqFriendDeleteDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{38}
}

func (x *ReqFriendDeleteDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqFriendDeleteDao) GetFriend() string {
	if x != nil {
		return x.Friend
	}
	return ""
}

// 用户管理信息更新请求
type ReqUserManageUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               string                  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AddFriendPermissionType AddFriendPermissionType `protobuf:"varint,2,opt,name=addFriendPermissionType,proto3,enum=im.AddFriendPermissionType" json:"addFriendPermissionType,omitempty"`
}

func (x *ReqUserManageUpdateDao) Reset() {
	*x = ReqUserManageUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserManageUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserManageUpdateDao) ProtoMessage() {}

func (x *ReqUserManageUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserManageUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqUserManageUpdateDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{39}
}

func (x *ReqUserManageUpdateDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqUserManageUpdateDao) GetAddFriendPermissionType() AddFriendPermissionType {
	if x != nil {
		return x.AddFriendPermissionType
	}
	return AddFriendPermissionType_NoLimit
}

// 查看用户管理信息请求
type ReqUserManageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqUserManageQueryDao) Reset() {
	*x = ReqUserManageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserManageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserManageQueryDao) ProtoMessage() {}

func (x *ReqUserManageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserManageQueryDao.ProtoReflect.Descriptor instead.
func (*ReqUserManageQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{40}
}

func (x *ReqUserManageQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// 查看用户管理信息返回结果
type RspUserManageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               string                  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AddFriendPermissionType AddFriendPermissionType `protobuf:"varint,2,opt,name=addFriendPermissionType,proto3,enum=im.AddFriendPermissionType" json:"addFriendPermissionType,omitempty"`
	UpdateTimestamp         int64                   `protobuf:"varint,3,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
}

func (x *RspUserManageQueryDao) Reset() {
	*x = RspUserManageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserManageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserManageQueryDao) ProtoMessage() {}

func (x *RspUserManageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserManageQueryDao.ProtoReflect.Descriptor instead.
func (*RspUserManageQueryDao) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{41}
}

func (x *RspUserManageQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RspUserManageQueryDao) GetAddFriendPermissionType() AddFriendPermissionType {
	if x != nil {
		return x.AddFriendPermissionType
	}
	return AddFriendPermissionType_NoLimit
}

func (x *RspUserManageQueryDao) GetUpdateTimestamp() int64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

var File_im_proto protoreflect.FileDescriptor

var file_im_proto_rawDesc = []byte{
	0x0a, 0x08, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6d, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x31,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6a, 0x6f,
	0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x61, 0x6f, 0x52, 0x05,
	0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x31, 0x0a,
	0x10, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x61,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xe7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x6a, 0x6f, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x19, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9e, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69,
	0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x75, 0x0a, 0x12,
	0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x6f, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x15,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6a, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x61, 0x6f, 0x52, 0x05, 0x6a, 0x6f,
	0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x44, 0x61, 0x6f, 0x52, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a,
	0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x69,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a,
	0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x61, 0x6f, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x7e, 0x0a, 0x19, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x31, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x57,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x69, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22, 0x60, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x59, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x02,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x69, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x6b, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x36, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x09, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x65, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x44, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x69, 0x6d,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x35, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17,
	0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2a, 0x59, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x10, 0x66, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x67,
	0x12, 0x1b, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0xe8, 0x07, 0x2a, 0x4b, 0x0a,
	0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x12, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6d, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x10, 0x02, 0x2a, 0x34, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x01, 0x32, 0x9e, 0x10,
	0x0a, 0x05, 0x44, 0x61, 0x6f, 0x49, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x1a, 0x14,
	0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x6f, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x6f, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x2e,
	0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x53, 0x0a,
	0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x44, 0x61, 0x6f, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x6f, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x6f,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x17, 0x2e, 0x69,
	0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a,
	0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x44,
	0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x16, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x6f, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x65, 0x0a, 0x21, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x17, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x16,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x44, 0x61, 0x6f, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a,
	0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12,
	0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x1a, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x47, 0x0a,
	0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x61, 0x6f, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x6f, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f,
	0x1a, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x48, 0x0a, 0x16, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x6f, 0x1a, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x52,
	0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x13, 0x2e, 0x69, 0x6d,
	0x2e, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x2e,
	0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x6f, 0x1a, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x47, 0x0a, 0x12, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x6f, 0x12, 0x19,
	0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x41, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1a,
	0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x6f, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x42, 0x34,
	0x5a, 0x32, 0x62, 0x61, 0x62, 0x79, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x64, 0x2d, 0x72, 0x69, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6b,
	0x69, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x69, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_im_proto_rawDescOnce sync.Once
	file_im_proto_rawDescData = file_im_proto_rawDesc
)

func file_im_proto_rawDescGZIP() []byte {
	file_im_proto_rawDescOnce.Do(func() {
		file_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_proto_rawDescData)
	})
	return file_im_proto_rawDescData
}

var file_im_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_im_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_im_proto_goTypes = []interface{}{
	(SessionType)(0),                             // 0: im.SessionType
	(SessionLevel)(0),                            // 1: im.SessionLevel
	(SessionJoinPermissionType)(0),               // 2: im.SessionJoinPermissionType
	(SessionMessageType)(0),                      // 3: im.SessionMessageType
	(OptType)(0),                                 // 4: im.OptType
	(AddFriendPermissionType)(0),                 // 5: im.AddFriendPermissionType
	(*ReqSessionAddDao)(nil),                     // 6: im.ReqSessionAddDao
	(*RspSessionAddDao)(nil),                     // 7: im.RspSessionAddDao
	(*ReqSessionUpdateDao)(nil),                  // 8: im.ReqSessionUpdateDao
	(*ReqSessionRemarkUpdateDao)(nil),            // 9: im.ReqSessionRemarkUpdateDao
	(*ReqSessionQueryDao)(nil),                   // 10: im.ReqSessionQueryDao
	(*RspSessionQueryDao)(nil),                   // 11: im.RspSessionQueryDao
	(*SessionQueryDao)(nil),                      // 12: im.SessionQueryDao
	(*SessionDetailQueryDao)(nil),                // 13: im.SessionDetailQueryDao
	(*JoinRemarkDao)(nil),                        // 14: im.JoinRemarkDao
	(*ReqSessionDetailQueryDao)(nil),             // 15: im.ReqSessionDetailQueryDao
	(*RspSessionDetailQueryDao)(nil),             // 16: im.RspSessionDetailQueryDao
	(*ReqSessionJoinDao)(nil),                    // 17: im.ReqSessionJoinDao
	(*ReqSessionLeaveDao)(nil),                   // 18: im.ReqSessionLeaveDao
	(*ReqSessionInviteJoinDao)(nil),              // 19: im.ReqSessionInviteJoinDao
	(*ReqSessionRemoveDao)(nil),                  // 20: im.ReqSessionRemoveDao
	(*ReqSessionDeleteDao)(nil),                  // 21: im.ReqSessionDeleteDao
	(*SessionMessageDao)(nil),                    // 22: im.SessionMessageDao
	(*ReqSessionMessageAddDao)(nil),              // 23: im.ReqSessionMessageAddDao
	(*ReqSessionMessageQueryDao)(nil),            // 24: im.ReqSessionMessageQueryDao
	(*RspSessionMessageQueryDao)(nil),            // 25: im.RspSessionMessageQueryDao
	(*ReqSessionMessageReadStatusUpdateDao)(nil), // 26: im.ReqSessionMessageReadStatusUpdateDao
	(*ReqSessionMessageDeleteDao)(nil),           // 27: im.ReqSessionMessageDeleteDao
	(*ReqSessionMessageFlushDao)(nil),            // 28: im.ReqSessionMessageFlushDao
	(*ReqOperatorAddDao)(nil),                    // 29: im.ReqOperatorAddDao
	(*RspOperatorAddDao)(nil),                    // 30: im.RspOperatorAddDao
	(*ReqOperatorConfirmDao)(nil),                // 31: im.ReqOperatorConfirmDao
	(*ReqOperatorReadStatusUpdateDao)(nil),       // 32: im.ReqOperatorReadStatusUpdateDao
	(*ReqOperatorsQueryDao)(nil),                 // 33: im.ReqOperatorsQueryDao
	(*RspOperatorsQueryDao)(nil),                 // 34: im.RspOperatorsQueryDao
	(*ReqOperatorSingleQueryDao)(nil),            // 35: im.ReqOperatorSingleQueryDao
	(*OperatorDao)(nil),                          // 36: im.OperatorDao
	(*ReqOperatorDeleteDao)(nil),                 // 37: im.ReqOperatorDeleteDao
	(*ReqFriendAddDao)(nil),                      // 38: im.ReqFriendAddDao
	(*ReqFriendQueryDao)(nil),                    // 39: im.ReqFriendQueryDao
	(*RspFriendQueryDao)(nil),                    // 40: im.RspFriendQueryDao
	(*FriendDao)(nil),                            // 41: im.FriendDao
	(*ReqFriendBlackListDao)(nil),                // 42: im.ReqFriendBlackListDao
	(*ReqFriendRemarkDao)(nil),                   // 43: im.ReqFriendRemarkDao
	(*ReqFriendDeleteDao)(nil),                   // 44: im.ReqFriendDeleteDao
	(*ReqUserManageUpdateDao)(nil),               // 45: im.ReqUserManageUpdateDao
	(*ReqUserManageQueryDao)(nil),                // 46: im.ReqUserManageQueryDao
	(*RspUserManageQueryDao)(nil),                // 47: im.RspUserManageQueryDao
	(*common.CommonSearchRequest)(nil),           // 48: common.CommonSearchRequest
	(*emptypb.Empty)(nil),                        // 49: google.protobuf.Empty
}
var file_im_proto_depIdxs = []int32{
	0,  // 0: im.ReqSessionAddDao.sessionType:type_name -> im.SessionType
	2,  // 1: im.ReqSessionAddDao.joinPermissionType:type_name -> im.SessionJoinPermissionType
	14, // 2: im.ReqSessionAddDao.joins:type_name -> im.JoinRemarkDao
	1,  // 3: im.ReqSessionAddDao.level:type_name -> im.SessionLevel
	0,  // 4: im.ReqSessionUpdateDao.sessionType:type_name -> im.SessionType
	2,  // 5: im.ReqSessionUpdateDao.joinPermissionType:type_name -> im.SessionJoinPermissionType
	48, // 6: im.ReqSessionQueryDao.commonSearchReq:type_name -> common.CommonSearchRequest
	0,  // 7: im.ReqSessionQueryDao.sessionType:type_name -> im.SessionType
	12, // 8: im.RspSessionQueryDao.sessions:type_name -> im.SessionQueryDao
	0,  // 9: im.SessionQueryDao.sessionType:type_name -> im.SessionType
	1,  // 10: im.SessionQueryDao.level:type_name -> im.SessionLevel
	22, // 11: im.SessionQueryDao.latest:type_name -> im.SessionMessageDao
	0,  // 12: im.SessionDetailQueryDao.sessionType:type_name -> im.SessionType
	1,  // 13: im.SessionDetailQueryDao.level:type_name -> im.SessionLevel
	14, // 14: im.SessionDetailQueryDao.joins:type_name -> im.JoinRemarkDao
	2,  // 15: im.SessionDetailQueryDao.joinPermissionType:type_name -> im.SessionJoinPermissionType
	0,  // 16: im.RspSessionDetailQueryDao.sessionType:type_name -> im.SessionType
	1,  // 17: im.RspSessionDetailQueryDao.level:type_name -> im.SessionLevel
	14, // 18: im.RspSessionDetailQueryDao.joins:type_name -> im.JoinRemarkDao
	2,  // 19: im.RspSessionDetailQueryDao.joinPermissionType:type_name -> im.SessionJoinPermissionType
	3,  // 20: im.SessionMessageDao.messageType:type_name -> im.SessionMessageType
	14, // 21: im.SessionMessageDao.send:type_name -> im.JoinRemarkDao
	3,  // 22: im.ReqSessionMessageAddDao.messageType:type_name -> im.SessionMessageType
	22, // 23: im.RspSessionMessageQueryDao.messages:type_name -> im.SessionMessageDao
	4,  // 24: im.ReqOperatorAddDao.optType:type_name -> im.OptType
	36, // 25: im.RspOperatorsQueryDao.list:type_name -> im.OperatorDao
	4,  // 26: im.OperatorDao.optType:type_name -> im.OptType
	41, // 27: im.RspFriendQueryDao.list:type_name -> im.FriendDao
	5,  // 28: im.ReqUserManageUpdateDao.addFriendPermissionType:type_name -> im.AddFriendPermissionType
	5,  // 29: im.RspUserManageQueryDao.addFriendPermissionType:type_name -> im.AddFriendPermissionType
	6,  // 30: im.DaoIm.SessionAddDao:input_type -> im.ReqSessionAddDao
	8,  // 31: im.DaoIm.SessionUpdateDao:input_type -> im.ReqSessionUpdateDao
	9,  // 32: im.DaoIm.SessionRemarkUpdateDao:input_type -> im.ReqSessionRemarkUpdateDao
	10, // 33: im.DaoIm.SessionQueryDao:input_type -> im.ReqSessionQueryDao
	15, // 34: im.DaoIm.SessionDetailQueryDao:input_type -> im.ReqSessionDetailQueryDao
	17, // 35: im.DaoIm.SessionJoinDao:input_type -> im.ReqSessionJoinDao
	18, // 36: im.DaoIm.SessionLeaveDao:input_type -> im.ReqSessionLeaveDao
	19, // 37: im.DaoIm.SessionInviteJoinDao:input_type -> im.ReqSessionInviteJoinDao
	20, // 38: im.DaoIm.SessionRemoveDao:input_type -> im.ReqSessionRemoveDao
	21, // 39: im.DaoIm.SessionDeleteDao:input_type -> im.ReqSessionDeleteDao
	23, // 40: im.DaoIm.SessionMessageAddDao:input_type -> im.ReqSessionMessageAddDao
	24, // 41: im.DaoIm.SessionMessageQueryDao:input_type -> im.ReqSessionMessageQueryDao
	26, // 42: im.DaoIm.SessionMessageReadStatusUpdateDao:input_type -> im.ReqSessionMessageReadStatusUpdateDao
	27, // 43: im.DaoIm.SessionMessageDeleteDao:input_type -> im.ReqSessionMessageDeleteDao
	28, // 44: im.DaoIm.SessionMessageFlushDao:input_type -> im.ReqSessionMessageFlushDao
	29, // 45: im.DaoIm.OperatorAddDao:input_type -> im.ReqOperatorAddDao
	31, // 46: im.DaoIm.OperatorConfirmDao:input_type -> im.ReqOperatorConfirmDao
	32, // 47: im.DaoIm.OperatorReadStatusUpdateDao:input_type -> im.ReqOperatorReadStatusUpdateDao
	33, // 48: im.DaoIm.OperatorsQueryDao:input_type -> im.ReqOperatorsQueryDao
	35, // 49: im.DaoIm.OperatorSingleQueryDao:input_type -> im.ReqOperatorSingleQueryDao
	37, // 50: im.DaoIm.OperatorDeleteDao:input_type -> im.ReqOperatorDeleteDao
	38, // 51: im.DaoIm.FriendAddDao:input_type -> im.ReqFriendAddDao
	39, // 52: im.DaoIm.FriendQueryDao:input_type -> im.ReqFriendQueryDao
	42, // 53: im.DaoIm.FriendBlackListDao:input_type -> im.ReqFriendBlackListDao
	43, // 54: im.DaoIm.FriendRemarkDao:input_type -> im.ReqFriendRemarkDao
	44, // 55: im.DaoIm.FriendDeleteDao:input_type -> im.ReqFriendDeleteDao
	45, // 56: im.DaoIm.UserManageUpdateDao:input_type -> im.ReqUserManageUpdateDao
	46, // 57: im.DaoIm.UserManageQueryDao:input_type -> im.ReqUserManageQueryDao
	7,  // 58: im.DaoIm.SessionAddDao:output_type -> im.RspSessionAddDao
	49, // 59: im.DaoIm.SessionUpdateDao:output_type -> google.protobuf.Empty
	49, // 60: im.DaoIm.SessionRemarkUpdateDao:output_type -> google.protobuf.Empty
	11, // 61: im.DaoIm.SessionQueryDao:output_type -> im.RspSessionQueryDao
	16, // 62: im.DaoIm.SessionDetailQueryDao:output_type -> im.RspSessionDetailQueryDao
	49, // 63: im.DaoIm.SessionJoinDao:output_type -> google.protobuf.Empty
	49, // 64: im.DaoIm.SessionLeaveDao:output_type -> google.protobuf.Empty
	49, // 65: im.DaoIm.SessionInviteJoinDao:output_type -> google.protobuf.Empty
	49, // 66: im.DaoIm.SessionRemoveDao:output_type -> google.protobuf.Empty
	49, // 67: im.DaoIm.SessionDeleteDao:output_type -> google.protobuf.Empty
	49, // 68: im.DaoIm.SessionMessageAddDao:output_type -> google.protobuf.Empty
	25, // 69: im.DaoIm.SessionMessageQueryDao:output_type -> im.RspSessionMessageQueryDao
	49, // 70: im.DaoIm.SessionMessageReadStatusUpdateDao:output_type -> google.protobuf.Empty
	49, // 71: im.DaoIm.SessionMessageDeleteDao:output_type -> google.protobuf.Empty
	49, // 72: im.DaoIm.SessionMessageFlushDao:output_type -> google.protobuf.Empty
	30, // 73: im.DaoIm.OperatorAddDao:output_type -> im.RspOperatorAddDao
	49, // 74: im.DaoIm.OperatorConfirmDao:output_type -> google.protobuf.Empty
	49, // 75: im.DaoIm.OperatorReadStatusUpdateDao:output_type -> google.protobuf.Empty
	34, // 76: im.DaoIm.OperatorsQueryDao:output_type -> im.RspOperatorsQueryDao
	36, // 77: im.DaoIm.OperatorSingleQueryDao:output_type -> im.OperatorDao
	49, // 78: im.DaoIm.OperatorDeleteDao:output_type -> google.protobuf.Empty
	49, // 79: im.DaoIm.FriendAddDao:output_type -> google.protobuf.Empty
	40, // 80: im.DaoIm.FriendQueryDao:output_type -> im.RspFriendQueryDao
	49, // 81: im.DaoIm.FriendBlackListDao:output_type -> google.protobuf.Empty
	49, // 82: im.DaoIm.FriendRemarkDao:output_type -> google.protobuf.Empty
	49, // 83: im.DaoIm.FriendDeleteDao:output_type -> google.protobuf.Empty
	49, // 84: im.DaoIm.UserManageUpdateDao:output_type -> google.protobuf.Empty
	47, // 85: im.DaoIm.UserManageQueryDao:output_type -> im.RspUserManageQueryDao
	58, // [58:86] is the sub-list for method output_type
	30, // [30:58] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_im_proto_init() }
func file_im_proto_init() {
	if File_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSessionAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionRemarkUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSessionQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDetailQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRemarkDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionDetailQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSessionDetailQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionJoinDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionLeaveDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionInviteJoinDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionRemoveDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMessageDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionMessageAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionMessageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSessionMessageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionMessageReadStatusUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionMessageDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSessionMessageFlushDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOperatorAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorConfirmDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorReadStatusUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorsQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOperatorsQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorSingleQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFriendAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFriendQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFriendQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFriendBlackListDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFriendRemarkDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFriendDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserManageUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserManageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserManageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_im_proto_goTypes,
		DependencyIndexes: file_im_proto_depIdxs,
		EnumInfos:         file_im_proto_enumTypes,
		MessageInfos:      file_im_proto_msgTypes,
	}.Build()
	File_im_proto = out.File
	file_im_proto_rawDesc = nil
	file_im_proto_goTypes = nil
	file_im_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DaoImClient is the client API for DaoIm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaoImClient interface {
	// 创建会话
	SessionAddDao(ctx context.Context, in *ReqSessionAddDao, opts ...grpc.CallOption) (*RspSessionAddDao, error)
	// 更新会话信息
	SessionUpdateDao(ctx context.Context, in *ReqSessionUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 会话备注修改
	SessionRemarkUpdateDao(ctx context.Context, in *ReqSessionRemarkUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询会话列表
	SessionQueryDao(ctx context.Context, in *ReqSessionQueryDao, opts ...grpc.CallOption) (*RspSessionQueryDao, error)
	// 查询会话详细信息
	SessionDetailQueryDao(ctx context.Context, in *ReqSessionDetailQueryDao, opts ...grpc.CallOption) (*RspSessionDetailQueryDao, error)
	// 加入会话
	SessionJoinDao(ctx context.Context, in *ReqSessionJoinDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 离开会话
	SessionLeaveDao(ctx context.Context, in *ReqSessionLeaveDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 邀请加入会话
	SessionInviteJoinDao(ctx context.Context, in *ReqSessionInviteJoinDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 从会话中移除
	SessionRemoveDao(ctx context.Context, in *ReqSessionRemoveDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除会话
	SessionDeleteDao(ctx context.Context, in *ReqSessionDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 会话消息添加
	SessionMessageAddDao(ctx context.Context, in *ReqSessionMessageAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 会话消息查询
	SessionMessageQueryDao(ctx context.Context, in *ReqSessionMessageQueryDao, opts ...grpc.CallOption) (*RspSessionMessageQueryDao, error)
	// 会话消息读取状态更新
	SessionMessageReadStatusUpdateDao(ctx context.Context, in *ReqSessionMessageReadStatusUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 会话消息删除
	SessionMessageDeleteDao(ctx context.Context, in *ReqSessionMessageDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 会话消息清空
	SessionMessageFlushDao(ctx context.Context, in *ReqSessionMessageFlushDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加操作
	OperatorAddDao(ctx context.Context, in *ReqOperatorAddDao, opts ...grpc.CallOption) (*RspOperatorAddDao, error)
	// 确认操作
	OperatorConfirmDao(ctx context.Context, in *ReqOperatorConfirmDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新操作读取状态
	OperatorReadStatusUpdateDao(ctx context.Context, in *ReqOperatorReadStatusUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询操作列表
	OperatorsQueryDao(ctx context.Context, in *ReqOperatorsQueryDao, opts ...grpc.CallOption) (*RspOperatorsQueryDao, error)
	// 查询单个操作
	OperatorSingleQueryDao(ctx context.Context, in *ReqOperatorSingleQueryDao, opts ...grpc.CallOption) (*OperatorDao, error)
	// 删除操作
	OperatorDeleteDao(ctx context.Context, in *ReqOperatorDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 好友添加
	FriendAddDao(ctx context.Context, in *ReqFriendAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 好友列表查询
	FriendQueryDao(ctx context.Context, in *ReqFriendQueryDao, opts ...grpc.CallOption) (*RspFriendQueryDao, error)
	// 好友黑名单操作
	FriendBlackListDao(ctx context.Context, in *ReqFriendBlackListDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改好友备注
	FriendRemarkDao(ctx context.Context, in *ReqFriendRemarkDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除好友
	FriendDeleteDao(ctx context.Context, in *ReqFriendDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户管理更新
	UserManageUpdateDao(ctx context.Context, in *ReqUserManageUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户管理查询
	UserManageQueryDao(ctx context.Context, in *ReqUserManageQueryDao, opts ...grpc.CallOption) (*RspUserManageQueryDao, error)
}

type daoImClient struct {
	cc grpc.ClientConnInterface
}

func NewDaoImClient(cc grpc.ClientConnInterface) DaoImClient {
	return &daoImClient{cc}
}

func (c *daoImClient) SessionAddDao(ctx context.Context, in *ReqSessionAddDao, opts ...grpc.CallOption) (*RspSessionAddDao, error) {
	out := new(RspSessionAddDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionUpdateDao(ctx context.Context, in *ReqSessionUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionRemarkUpdateDao(ctx context.Context, in *ReqSessionRemarkUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionRemarkUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionQueryDao(ctx context.Context, in *ReqSessionQueryDao, opts ...grpc.CallOption) (*RspSessionQueryDao, error) {
	out := new(RspSessionQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionDetailQueryDao(ctx context.Context, in *ReqSessionDetailQueryDao, opts ...grpc.CallOption) (*RspSessionDetailQueryDao, error) {
	out := new(RspSessionDetailQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionDetailQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionJoinDao(ctx context.Context, in *ReqSessionJoinDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionJoinDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionLeaveDao(ctx context.Context, in *ReqSessionLeaveDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionLeaveDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionInviteJoinDao(ctx context.Context, in *ReqSessionInviteJoinDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionInviteJoinDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionRemoveDao(ctx context.Context, in *ReqSessionRemoveDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionRemoveDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionDeleteDao(ctx context.Context, in *ReqSessionDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionDeleteDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionMessageAddDao(ctx context.Context, in *ReqSessionMessageAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionMessageAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionMessageQueryDao(ctx context.Context, in *ReqSessionMessageQueryDao, opts ...grpc.CallOption) (*RspSessionMessageQueryDao, error) {
	out := new(RspSessionMessageQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionMessageQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionMessageReadStatusUpdateDao(ctx context.Context, in *ReqSessionMessageReadStatusUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionMessageReadStatusUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionMessageDeleteDao(ctx context.Context, in *ReqSessionMessageDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionMessageDeleteDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) SessionMessageFlushDao(ctx context.Context, in *ReqSessionMessageFlushDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/SessionMessageFlushDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorAddDao(ctx context.Context, in *ReqOperatorAddDao, opts ...grpc.CallOption) (*RspOperatorAddDao, error) {
	out := new(RspOperatorAddDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorConfirmDao(ctx context.Context, in *ReqOperatorConfirmDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorConfirmDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorReadStatusUpdateDao(ctx context.Context, in *ReqOperatorReadStatusUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorReadStatusUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorsQueryDao(ctx context.Context, in *ReqOperatorsQueryDao, opts ...grpc.CallOption) (*RspOperatorsQueryDao, error) {
	out := new(RspOperatorsQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorsQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorSingleQueryDao(ctx context.Context, in *ReqOperatorSingleQueryDao, opts ...grpc.CallOption) (*OperatorDao, error) {
	out := new(OperatorDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorSingleQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) OperatorDeleteDao(ctx context.Context, in *ReqOperatorDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/OperatorDeleteDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) FriendAddDao(ctx context.Context, in *ReqFriendAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/FriendAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) FriendQueryDao(ctx context.Context, in *ReqFriendQueryDao, opts ...grpc.CallOption) (*RspFriendQueryDao, error) {
	out := new(RspFriendQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/FriendQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) FriendBlackListDao(ctx context.Context, in *ReqFriendBlackListDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/FriendBlackListDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) FriendRemarkDao(ctx context.Context, in *ReqFriendRemarkDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/FriendRemarkDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) FriendDeleteDao(ctx context.Context, in *ReqFriendDeleteDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/FriendDeleteDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) UserManageUpdateDao(ctx context.Context, in *ReqUserManageUpdateDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/im.DaoIm/UserManageUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoImClient) UserManageQueryDao(ctx context.Context, in *ReqUserManageQueryDao, opts ...grpc.CallOption) (*RspUserManageQueryDao, error) {
	out := new(RspUserManageQueryDao)
	err := c.cc.Invoke(ctx, "/im.DaoIm/UserManageQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaoImServer is the server API for DaoIm service.
type DaoImServer interface {
	// 创建会话
	SessionAddDao(context.Context, *ReqSessionAddDao) (*RspSessionAddDao, error)
	// 更新会话信息
	SessionUpdateDao(context.Context, *ReqSessionUpdateDao) (*emptypb.Empty, error)
	// 会话备注修改
	SessionRemarkUpdateDao(context.Context, *ReqSessionRemarkUpdateDao) (*emptypb.Empty, error)
	// 查询会话列表
	SessionQueryDao(context.Context, *ReqSessionQueryDao) (*RspSessionQueryDao, error)
	// 查询会话详细信息
	SessionDetailQueryDao(context.Context, *ReqSessionDetailQueryDao) (*RspSessionDetailQueryDao, error)
	// 加入会话
	SessionJoinDao(context.Context, *ReqSessionJoinDao) (*emptypb.Empty, error)
	// 离开会话
	SessionLeaveDao(context.Context, *ReqSessionLeaveDao) (*emptypb.Empty, error)
	// 邀请加入会话
	SessionInviteJoinDao(context.Context, *ReqSessionInviteJoinDao) (*emptypb.Empty, error)
	// 从会话中移除
	SessionRemoveDao(context.Context, *ReqSessionRemoveDao) (*emptypb.Empty, error)
	// 删除会话
	SessionDeleteDao(context.Context, *ReqSessionDeleteDao) (*emptypb.Empty, error)
	// 会话消息添加
	SessionMessageAddDao(context.Context, *ReqSessionMessageAddDao) (*emptypb.Empty, error)
	// 会话消息查询
	SessionMessageQueryDao(context.Context, *ReqSessionMessageQueryDao) (*RspSessionMessageQueryDao, error)
	// 会话消息读取状态更新
	SessionMessageReadStatusUpdateDao(context.Context, *ReqSessionMessageReadStatusUpdateDao) (*emptypb.Empty, error)
	// 会话消息删除
	SessionMessageDeleteDao(context.Context, *ReqSessionMessageDeleteDao) (*emptypb.Empty, error)
	// 会话消息清空
	SessionMessageFlushDao(context.Context, *ReqSessionMessageFlushDao) (*emptypb.Empty, error)
	// 添加操作
	OperatorAddDao(context.Context, *ReqOperatorAddDao) (*RspOperatorAddDao, error)
	// 确认操作
	OperatorConfirmDao(context.Context, *ReqOperatorConfirmDao) (*emptypb.Empty, error)
	// 更新操作读取状态
	OperatorReadStatusUpdateDao(context.Context, *ReqOperatorReadStatusUpdateDao) (*emptypb.Empty, error)
	// 查询操作列表
	OperatorsQueryDao(context.Context, *ReqOperatorsQueryDao) (*RspOperatorsQueryDao, error)
	// 查询单个操作
	OperatorSingleQueryDao(context.Context, *ReqOperatorSingleQueryDao) (*OperatorDao, error)
	// 删除操作
	OperatorDeleteDao(context.Context, *ReqOperatorDeleteDao) (*emptypb.Empty, error)
	// 好友添加
	FriendAddDao(context.Context, *ReqFriendAddDao) (*emptypb.Empty, error)
	// 好友列表查询
	FriendQueryDao(context.Context, *ReqFriendQueryDao) (*RspFriendQueryDao, error)
	// 好友黑名单操作
	FriendBlackListDao(context.Context, *ReqFriendBlackListDao) (*emptypb.Empty, error)
	// 修改好友备注
	FriendRemarkDao(context.Context, *ReqFriendRemarkDao) (*emptypb.Empty, error)
	// 删除好友
	FriendDeleteDao(context.Context, *ReqFriendDeleteDao) (*emptypb.Empty, error)
	// 用户管理更新
	UserManageUpdateDao(context.Context, *ReqUserManageUpdateDao) (*emptypb.Empty, error)
	// 用户管理查询
	UserManageQueryDao(context.Context, *ReqUserManageQueryDao) (*RspUserManageQueryDao, error)
}

// UnimplementedDaoImServer can be embedded to have forward compatible implementations.
type UnimplementedDaoImServer struct {
}

func (*UnimplementedDaoImServer) SessionAddDao(context.Context, *ReqSessionAddDao) (*RspSessionAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionAddDao not implemented")
}
func (*UnimplementedDaoImServer) SessionUpdateDao(context.Context, *ReqSessionUpdateDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateDao not implemented")
}
func (*UnimplementedDaoImServer) SessionRemarkUpdateDao(context.Context, *ReqSessionRemarkUpdateDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRemarkUpdateDao not implemented")
}
func (*UnimplementedDaoImServer) SessionQueryDao(context.Context, *ReqSessionQueryDao) (*RspSessionQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryDao not implemented")
}
func (*UnimplementedDaoImServer) SessionDetailQueryDao(context.Context, *ReqSessionDetailQueryDao) (*RspSessionDetailQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDetailQueryDao not implemented")
}
func (*UnimplementedDaoImServer) SessionJoinDao(context.Context, *ReqSessionJoinDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionJoinDao not implemented")
}
func (*UnimplementedDaoImServer) SessionLeaveDao(context.Context, *ReqSessionLeaveDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionLeaveDao not implemented")
}
func (*UnimplementedDaoImServer) SessionInviteJoinDao(context.Context, *ReqSessionInviteJoinDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionInviteJoinDao not implemented")
}
func (*UnimplementedDaoImServer) SessionRemoveDao(context.Context, *ReqSessionRemoveDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRemoveDao not implemented")
}
func (*UnimplementedDaoImServer) SessionDeleteDao(context.Context, *ReqSessionDeleteDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteDao not implemented")
}
func (*UnimplementedDaoImServer) SessionMessageAddDao(context.Context, *ReqSessionMessageAddDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionMessageAddDao not implemented")
}
func (*UnimplementedDaoImServer) SessionMessageQueryDao(context.Context, *ReqSessionMessageQueryDao) (*RspSessionMessageQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionMessageQueryDao not implemented")
}
func (*UnimplementedDaoImServer) SessionMessageReadStatusUpdateDao(context.Context, *ReqSessionMessageReadStatusUpdateDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionMessageReadStatusUpdateDao not implemented")
}
func (*UnimplementedDaoImServer) SessionMessageDeleteDao(context.Context, *ReqSessionMessageDeleteDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionMessageDeleteDao not implemented")
}
func (*UnimplementedDaoImServer) SessionMessageFlushDao(context.Context, *ReqSessionMessageFlushDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionMessageFlushDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorAddDao(context.Context, *ReqOperatorAddDao) (*RspOperatorAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorAddDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorConfirmDao(context.Context, *ReqOperatorConfirmDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorConfirmDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorReadStatusUpdateDao(context.Context, *ReqOperatorReadStatusUpdateDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorReadStatusUpdateDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorsQueryDao(context.Context, *ReqOperatorsQueryDao) (*RspOperatorsQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorsQueryDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorSingleQueryDao(context.Context, *ReqOperatorSingleQueryDao) (*OperatorDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorSingleQueryDao not implemented")
}
func (*UnimplementedDaoImServer) OperatorDeleteDao(context.Context, *ReqOperatorDeleteDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDeleteDao not implemented")
}
func (*UnimplementedDaoImServer) FriendAddDao(context.Context, *ReqFriendAddDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendAddDao not implemented")
}
func (*UnimplementedDaoImServer) FriendQueryDao(context.Context, *ReqFriendQueryDao) (*RspFriendQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendQueryDao not implemented")
}
func (*UnimplementedDaoImServer) FriendBlackListDao(context.Context, *ReqFriendBlackListDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendBlackListDao not implemented")
}
func (*UnimplementedDaoImServer) FriendRemarkDao(context.Context, *ReqFriendRemarkDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendRemarkDao not implemented")
}
func (*UnimplementedDaoImServer) FriendDeleteDao(context.Context, *ReqFriendDeleteDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendDeleteDao not implemented")
}
func (*UnimplementedDaoImServer) UserManageUpdateDao(context.Context, *ReqUserManageUpdateDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserManageUpdateDao not implemented")
}
func (*UnimplementedDaoImServer) UserManageQueryDao(context.Context, *ReqUserManageQueryDao) (*RspUserManageQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserManageQueryDao not implemented")
}

func RegisterDaoImServer(s *grpc.Server, srv DaoImServer) {
	s.RegisterService(&_DaoIm_serviceDesc, srv)
}

func _DaoIm_SessionAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionAddDao(ctx, req.(*ReqSessionAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionUpdateDao(ctx, req.(*ReqSessionUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionRemarkUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionRemarkUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionRemarkUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionRemarkUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionRemarkUpdateDao(ctx, req.(*ReqSessionRemarkUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionQueryDao(ctx, req.(*ReqSessionQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionDetailQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionDetailQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionDetailQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionDetailQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionDetailQueryDao(ctx, req.(*ReqSessionDetailQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionJoinDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionJoinDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionJoinDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionJoinDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionJoinDao(ctx, req.(*ReqSessionJoinDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionLeaveDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionLeaveDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionLeaveDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionLeaveDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionLeaveDao(ctx, req.(*ReqSessionLeaveDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionInviteJoinDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionInviteJoinDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionInviteJoinDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionInviteJoinDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionInviteJoinDao(ctx, req.(*ReqSessionInviteJoinDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionRemoveDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionRemoveDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionRemoveDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionRemoveDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionRemoveDao(ctx, req.(*ReqSessionRemoveDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionDeleteDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionDeleteDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionDeleteDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionDeleteDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionDeleteDao(ctx, req.(*ReqSessionDeleteDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionMessageAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMessageAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionMessageAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionMessageAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionMessageAddDao(ctx, req.(*ReqSessionMessageAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionMessageQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMessageQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionMessageQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionMessageQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionMessageQueryDao(ctx, req.(*ReqSessionMessageQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionMessageReadStatusUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMessageReadStatusUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionMessageReadStatusUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionMessageReadStatusUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionMessageReadStatusUpdateDao(ctx, req.(*ReqSessionMessageReadStatusUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionMessageDeleteDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMessageDeleteDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionMessageDeleteDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionMessageDeleteDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionMessageDeleteDao(ctx, req.(*ReqSessionMessageDeleteDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_SessionMessageFlushDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSessionMessageFlushDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).SessionMessageFlushDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/SessionMessageFlushDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).SessionMessageFlushDao(ctx, req.(*ReqSessionMessageFlushDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorAddDao(ctx, req.(*ReqOperatorAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorConfirmDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorConfirmDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorConfirmDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorConfirmDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorConfirmDao(ctx, req.(*ReqOperatorConfirmDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorReadStatusUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorReadStatusUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorReadStatusUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorReadStatusUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorReadStatusUpdateDao(ctx, req.(*ReqOperatorReadStatusUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorsQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorsQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorsQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorsQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorsQueryDao(ctx, req.(*ReqOperatorsQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorSingleQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorSingleQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorSingleQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorSingleQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorSingleQueryDao(ctx, req.(*ReqOperatorSingleQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_OperatorDeleteDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorDeleteDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).OperatorDeleteDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/OperatorDeleteDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).OperatorDeleteDao(ctx, req.(*ReqOperatorDeleteDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_FriendAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFriendAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).FriendAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/FriendAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).FriendAddDao(ctx, req.(*ReqFriendAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_FriendQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFriendQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).FriendQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/FriendQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).FriendQueryDao(ctx, req.(*ReqFriendQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_FriendBlackListDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFriendBlackListDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).FriendBlackListDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/FriendBlackListDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).FriendBlackListDao(ctx, req.(*ReqFriendBlackListDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_FriendRemarkDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFriendRemarkDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).FriendRemarkDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/FriendRemarkDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).FriendRemarkDao(ctx, req.(*ReqFriendRemarkDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_FriendDeleteDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFriendDeleteDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).FriendDeleteDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/FriendDeleteDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).FriendDeleteDao(ctx, req.(*ReqFriendDeleteDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_UserManageUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserManageUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).UserManageUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/UserManageUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).UserManageUpdateDao(ctx, req.(*ReqUserManageUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoIm_UserManageQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserManageQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoImServer).UserManageQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.DaoIm/UserManageQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoImServer).UserManageQueryDao(ctx, req.(*ReqUserManageQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaoIm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "im.DaoIm",
	HandlerType: (*DaoImServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionAddDao",
			Handler:    _DaoIm_SessionAddDao_Handler,
		},
		{
			MethodName: "SessionUpdateDao",
			Handler:    _DaoIm_SessionUpdateDao_Handler,
		},
		{
			MethodName: "SessionRemarkUpdateDao",
			Handler:    _DaoIm_SessionRemarkUpdateDao_Handler,
		},
		{
			MethodName: "SessionQueryDao",
			Handler:    _DaoIm_SessionQueryDao_Handler,
		},
		{
			MethodName: "SessionDetailQueryDao",
			Handler:    _DaoIm_SessionDetailQueryDao_Handler,
		},
		{
			MethodName: "SessionJoinDao",
			Handler:    _DaoIm_SessionJoinDao_Handler,
		},
		{
			MethodName: "SessionLeaveDao",
			Handler:    _DaoIm_SessionLeaveDao_Handler,
		},
		{
			MethodName: "SessionInviteJoinDao",
			Handler:    _DaoIm_SessionInviteJoinDao_Handler,
		},
		{
			MethodName: "SessionRemoveDao",
			Handler:    _DaoIm_SessionRemoveDao_Handler,
		},
		{
			MethodName: "SessionDeleteDao",
			Handler:    _DaoIm_SessionDeleteDao_Handler,
		},
		{
			MethodName: "SessionMessageAddDao",
			Handler:    _DaoIm_SessionMessageAddDao_Handler,
		},
		{
			MethodName: "SessionMessageQueryDao",
			Handler:    _DaoIm_SessionMessageQueryDao_Handler,
		},
		{
			MethodName: "SessionMessageReadStatusUpdateDao",
			Handler:    _DaoIm_SessionMessageReadStatusUpdateDao_Handler,
		},
		{
			MethodName: "SessionMessageDeleteDao",
			Handler:    _DaoIm_SessionMessageDeleteDao_Handler,
		},
		{
			MethodName: "SessionMessageFlushDao",
			Handler:    _DaoIm_SessionMessageFlushDao_Handler,
		},
		{
			MethodName: "OperatorAddDao",
			Handler:    _DaoIm_OperatorAddDao_Handler,
		},
		{
			MethodName: "OperatorConfirmDao",
			Handler:    _DaoIm_OperatorConfirmDao_Handler,
		},
		{
			MethodName: "OperatorReadStatusUpdateDao",
			Handler:    _DaoIm_OperatorReadStatusUpdateDao_Handler,
		},
		{
			MethodName: "OperatorsQueryDao",
			Handler:    _DaoIm_OperatorsQueryDao_Handler,
		},
		{
			MethodName: "OperatorSingleQueryDao",
			Handler:    _DaoIm_OperatorSingleQueryDao_Handler,
		},
		{
			MethodName: "OperatorDeleteDao",
			Handler:    _DaoIm_OperatorDeleteDao_Handler,
		},
		{
			MethodName: "FriendAddDao",
			Handler:    _DaoIm_FriendAddDao_Handler,
		},
		{
			MethodName: "FriendQueryDao",
			Handler:    _DaoIm_FriendQueryDao_Handler,
		},
		{
			MethodName: "FriendBlackListDao",
			Handler:    _DaoIm_FriendBlackListDao_Handler,
		},
		{
			MethodName: "FriendRemarkDao",
			Handler:    _DaoIm_FriendRemarkDao_Handler,
		},
		{
			MethodName: "FriendDeleteDao",
			Handler:    _DaoIm_FriendDeleteDao_Handler,
		},
		{
			MethodName: "UserManageUpdateDao",
			Handler:    _DaoIm_UserManageUpdateDao_Handler,
		},
		{
			MethodName: "UserManageQueryDao",
			Handler:    _DaoIm_UserManageQueryDao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im.proto",
}
