// proto 文件版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.14.0
// source: live.proto

// 生成文件的包名

package live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiveRoomStatus int32

const (
	// 默认关闭
	LiveRoomStatus_DefaultClose LiveRoomStatus = 0
	// 主播正常上线直播中
	LiveRoomStatus_Online LiveRoomStatus = 1
	// 主播活动直播中
	LiveRoomStatus_ActivityOnline LiveRoomStatus = 2
	// 主播已下线
	LiveRoomStatus_Offline LiveRoomStatus = 101
)

// Enum value maps for LiveRoomStatus.
var (
	LiveRoomStatus_name = map[int32]string{
		0:   "DefaultClose",
		1:   "Online",
		2:   "ActivityOnline",
		101: "Offline",
	}
	LiveRoomStatus_value = map[string]int32{
		"DefaultClose":   0,
		"Online":         1,
		"ActivityOnline": 2,
		"Offline":        101,
	}
)

func (x LiveRoomStatus) Enum() *LiveRoomStatus {
	p := new(LiveRoomStatus)
	*p = x
	return p
}

func (x LiveRoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveRoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_live_proto_enumTypes[0].Descriptor()
}

func (LiveRoomStatus) Type() protoreflect.EnumType {
	return &file_live_proto_enumTypes[0]
}

func (x LiveRoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveRoomStatus.Descriptor instead.
func (LiveRoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{0}
}

// 直播房间用户操作类型
type LiveRoomUserOptType int32

const (
	// 默认无效操作
	LiveRoomUserOptType_DefaultInvalidOptType LiveRoomUserOptType = 0
	// 用户进入直播房间
	LiveRoomUserOptType_EnterOptType LiveRoomUserOptType = 10
	// 用户退出直播房间
	LiveRoomUserOptType_QuitOptType LiveRoomUserOptType = 11
	// 主播将用户移出直播房间
	LiveRoomUserOptType_RemoveOptType LiveRoomUserOptType = 12
)

// Enum value maps for LiveRoomUserOptType.
var (
	LiveRoomUserOptType_name = map[int32]string{
		0:  "DefaultInvalidOptType",
		10: "EnterOptType",
		11: "QuitOptType",
		12: "RemoveOptType",
	}
	LiveRoomUserOptType_value = map[string]int32{
		"DefaultInvalidOptType": 0,
		"EnterOptType":          10,
		"QuitOptType":           11,
		"RemoveOptType":         12,
	}
)

func (x LiveRoomUserOptType) Enum() *LiveRoomUserOptType {
	p := new(LiveRoomUserOptType)
	*p = x
	return p
}

func (x LiveRoomUserOptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveRoomUserOptType) Descriptor() protoreflect.EnumDescriptor {
	return file_live_proto_enumTypes[1].Descriptor()
}

func (LiveRoomUserOptType) Type() protoreflect.EnumType {
	return &file_live_proto_enumTypes[1]
}

func (x LiveRoomUserOptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveRoomUserOptType.Descriptor instead.
func (LiveRoomUserOptType) EnumDescriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{1}
}

// 直播房间消息类型
type LiveRoomMessageType int32

const (
	// 文字消息
	LiveRoomMessageType_TextMessage LiveRoomMessageType = 0
	// 用户进入直播房间操作消息
	LiveRoomMessageType_UserEnterOptMessage LiveRoomMessageType = 100
	// 用户退出直播房间操作消息
	LiveRoomMessageType_UserQuitOptMessage LiveRoomMessageType = 101
	// 直播房间已禁言
	LiveRoomMessageType_MuteOptMessage LiveRoomMessageType = 201
	// 直播房间已解除禁言
	LiveRoomMessageType_UnmuteOptMessage LiveRoomMessageType = 200
)

// Enum value maps for LiveRoomMessageType.
var (
	LiveRoomMessageType_name = map[int32]string{
		0:   "TextMessage",
		100: "UserEnterOptMessage",
		101: "UserQuitOptMessage",
		201: "MuteOptMessage",
		200: "UnmuteOptMessage",
	}
	LiveRoomMessageType_value = map[string]int32{
		"TextMessage":         0,
		"UserEnterOptMessage": 100,
		"UserQuitOptMessage":  101,
		"MuteOptMessage":      201,
		"UnmuteOptMessage":    200,
	}
)

func (x LiveRoomMessageType) Enum() *LiveRoomMessageType {
	p := new(LiveRoomMessageType)
	*p = x
	return p
}

func (x LiveRoomMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveRoomMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_live_proto_enumTypes[2].Descriptor()
}

func (LiveRoomMessageType) Type() protoreflect.EnumType {
	return &file_live_proto_enumTypes[2]
}

func (x LiveRoomMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveRoomMessageType.Descriptor instead.
func (LiveRoomMessageType) EnumDescriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{2}
}

// 直播房间列表查询
type ReqLiveRoomQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64          `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Status   LiveRoomStatus `protobuf:"varint,3,opt,name=status,proto3,enum=live.LiveRoomStatus" json:"status,omitempty"`
}

func (x *ReqLiveRoomQueryDao) Reset() {
	*x = ReqLiveRoomQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomQueryDao) ProtoMessage() {}

func (x *ReqLiveRoomQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomQueryDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{0}
}

func (x *ReqLiveRoomQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqLiveRoomQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqLiveRoomQueryDao) GetStatus() LiveRoomStatus {
	if x != nil {
		return x.Status
	}
	return LiveRoomStatus_DefaultClose
}

type RspLiveRoomQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64       `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	List     []*LiveRoom `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RspLiveRoomQueryDao) Reset() {
	*x = RspLiveRoomQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLiveRoomQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLiveRoomQueryDao) ProtoMessage() {}

func (x *RspLiveRoomQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLiveRoomQueryDao.ProtoReflect.Descriptor instead.
func (*RspLiveRoomQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{1}
}

func (x *RspLiveRoomQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspLiveRoomQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RspLiveRoomQueryDao) GetList() []*LiveRoom {
	if x != nil {
		return x.List
	}
	return nil
}

type LiveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 直播房间ID
	LiveRoomId string `protobuf:"bytes,1,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	// 直播房间主播账号
	Origin string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// 直播房间状态
	Status LiveRoomStatus `protobuf:"varint,3,opt,name=status,proto3,enum=live.LiveRoomStatus" json:"status,omitempty"`
	// 直播房间人数
	UserTotal int64 `protobuf:"varint,4,opt,name=userTotal,proto3" json:"userTotal,omitempty"`
}

func (x *LiveRoom) Reset() {
	*x = LiveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoom) ProtoMessage() {}

func (x *LiveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoom.ProtoReflect.Descriptor instead.
func (*LiveRoom) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{2}
}

func (x *LiveRoom) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *LiveRoom) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *LiveRoom) GetStatus() LiveRoomStatus {
	if x != nil {
		return x.Status
	}
	return LiveRoomStatus_DefaultClose
}

func (x *LiveRoom) GetUserTotal() int64 {
	if x != nil {
		return x.UserTotal
	}
	return 0
}

// 直播房间详情查询
type ReqLiveRoomDetailQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRoomId string `protobuf:"bytes,1,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	AccountId  string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqLiveRoomDetailQueryDao) Reset() {
	*x = ReqLiveRoomDetailQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomDetailQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomDetailQueryDao) ProtoMessage() {}

func (x *ReqLiveRoomDetailQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomDetailQueryDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomDetailQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{3}
}

func (x *ReqLiveRoomDetailQueryDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *ReqLiveRoomDetailQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RspLiveRoomDetailQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRoomId string         `protobuf:"bytes,1,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	Origin     string         `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Status     LiveRoomStatus `protobuf:"varint,3,opt,name=status,proto3,enum=live.LiveRoomStatus" json:"status,omitempty"`
	UserTotal  int64          `protobuf:"varint,4,opt,name=userTotal,proto3" json:"userTotal,omitempty"`
	// 在线时长
	OnlineTime int64 `protobuf:"varint,5,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`
}

func (x *RspLiveRoomDetailQueryDao) Reset() {
	*x = RspLiveRoomDetailQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLiveRoomDetailQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLiveRoomDetailQueryDao) ProtoMessage() {}

func (x *RspLiveRoomDetailQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLiveRoomDetailQueryDao.ProtoReflect.Descriptor instead.
func (*RspLiveRoomDetailQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{4}
}

func (x *RspLiveRoomDetailQueryDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *RspLiveRoomDetailQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *RspLiveRoomDetailQueryDao) GetStatus() LiveRoomStatus {
	if x != nil {
		return x.Status
	}
	return LiveRoomStatus_DefaultClose
}

func (x *RspLiveRoomDetailQueryDao) GetUserTotal() int64 {
	if x != nil {
		return x.UserTotal
	}
	return 0
}

func (x *RspLiveRoomDetailQueryDao) GetOnlineTime() int64 {
	if x != nil {
		return x.OnlineTime
	}
	return 0
}

// 直播房间主播查询用户列表
type ReqLiveRoomUserQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	LiveRoomId string `protobuf:"bytes,3,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	Origin     string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *ReqLiveRoomUserQueryDao) Reset() {
	*x = ReqLiveRoomUserQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomUserQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomUserQueryDao) ProtoMessage() {}

func (x *ReqLiveRoomUserQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomUserQueryDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomUserQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{5}
}

func (x *ReqLiveRoomUserQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqLiveRoomUserQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqLiveRoomUserQueryDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *ReqLiveRoomUserQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

type RspLiveRoomUserQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Users    []string `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *RspLiveRoomUserQueryDao) Reset() {
	*x = RspLiveRoomUserQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLiveRoomUserQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLiveRoomUserQueryDao) ProtoMessage() {}

func (x *RspLiveRoomUserQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLiveRoomUserQueryDao.ProtoReflect.Descriptor instead.
func (*RspLiveRoomUserQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{6}
}

func (x *RspLiveRoomUserQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspLiveRoomUserQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RspLiveRoomUserQueryDao) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

// 主播更新直播房间状态
type ReqLiveRoomStatusUpdateDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin string         `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Status LiveRoomStatus `protobuf:"varint,2,opt,name=status,proto3,enum=live.LiveRoomStatus" json:"status,omitempty"`
}

func (x *ReqLiveRoomStatusUpdateDao) Reset() {
	*x = ReqLiveRoomStatusUpdateDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomStatusUpdateDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomStatusUpdateDao) ProtoMessage() {}

func (x *ReqLiveRoomStatusUpdateDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomStatusUpdateDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomStatusUpdateDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{7}
}

func (x *ReqLiveRoomStatusUpdateDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqLiveRoomStatusUpdateDao) GetStatus() LiveRoomStatus {
	if x != nil {
		return x.Status
	}
	return LiveRoomStatus_DefaultClose
}

// 直播房间用户操作添加
type ReqLiveRoomUserOptAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRoomId string              `protobuf:"bytes,1,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	AccountId  string              `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Opt        LiveRoomUserOptType `protobuf:"varint,3,opt,name=opt,proto3,enum=live.LiveRoomUserOptType" json:"opt,omitempty"`
}

func (x *ReqLiveRoomUserOptAddDao) Reset() {
	*x = ReqLiveRoomUserOptAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomUserOptAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomUserOptAddDao) ProtoMessage() {}

func (x *ReqLiveRoomUserOptAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomUserOptAddDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomUserOptAddDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{8}
}

func (x *ReqLiveRoomUserOptAddDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *ReqLiveRoomUserOptAddDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqLiveRoomUserOptAddDao) GetOpt() LiveRoomUserOptType {
	if x != nil {
		return x.Opt
	}
	return LiveRoomUserOptType_DefaultInvalidOptType
}

type RspLiveRoomUserOptAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRoomId string `protobuf:"bytes,1,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	Origin     string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RspLiveRoomUserOptAddDao) Reset() {
	*x = RspLiveRoomUserOptAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLiveRoomUserOptAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLiveRoomUserOptAddDao) ProtoMessage() {}

func (x *RspLiveRoomUserOptAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLiveRoomUserOptAddDao.ProtoReflect.Descriptor instead.
func (*RspLiveRoomUserOptAddDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{9}
}

func (x *RspLiveRoomUserOptAddDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *RspLiveRoomUserOptAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

// 直播房间用户消息发送
type ReqLiveRoomMessageAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	MessageType LiveRoomMessageType `protobuf:"varint,2,opt,name=messageType,proto3,enum=live.LiveRoomMessageType" json:"messageType,omitempty"`
	// 消息发送者
	Send string `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	// 直播房间ID
	LiveRoomId string `protobuf:"bytes,4,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 发送时间
	SendTimestamp int64 `protobuf:"varint,6,opt,name=sendTimestamp,proto3" json:"sendTimestamp,omitempty"`
}

func (x *ReqLiveRoomMessageAddDao) Reset() {
	*x = ReqLiveRoomMessageAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomMessageAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomMessageAddDao) ProtoMessage() {}

func (x *ReqLiveRoomMessageAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomMessageAddDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomMessageAddDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{10}
}

func (x *ReqLiveRoomMessageAddDao) GetMessageType() LiveRoomMessageType {
	if x != nil {
		return x.MessageType
	}
	return LiveRoomMessageType_TextMessage
}

func (x *ReqLiveRoomMessageAddDao) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *ReqLiveRoomMessageAddDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *ReqLiveRoomMessageAddDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReqLiveRoomMessageAddDao) GetSendTimestamp() int64 {
	if x != nil {
		return x.SendTimestamp
	}
	return 0
}

// 直播房间消息查询
type ReqLiveRoomMessageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 直播房间ID
	LiveRoomId string `protobuf:"bytes,3,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	// 查询者
	AccountId string `protobuf:"bytes,4,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqLiveRoomMessageQueryDao) Reset() {
	*x = ReqLiveRoomMessageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLiveRoomMessageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLiveRoomMessageQueryDao) ProtoMessage() {}

func (x *ReqLiveRoomMessageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLiveRoomMessageQueryDao.ProtoReflect.Descriptor instead.
func (*ReqLiveRoomMessageQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{11}
}

func (x *ReqLiveRoomMessageQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqLiveRoomMessageQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqLiveRoomMessageQueryDao) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *ReqLiveRoomMessageQueryDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RspLiveRoomMessageQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	List     []*LiveRoomMessage `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RspLiveRoomMessageQueryDao) Reset() {
	*x = RspLiveRoomMessageQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLiveRoomMessageQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLiveRoomMessageQueryDao) ProtoMessage() {}

func (x *RspLiveRoomMessageQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLiveRoomMessageQueryDao.ProtoReflect.Descriptor instead.
func (*RspLiveRoomMessageQueryDao) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{12}
}

func (x *RspLiveRoomMessageQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspLiveRoomMessageQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RspLiveRoomMessageQueryDao) GetList() []*LiveRoomMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type LiveRoomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// 消息类型
	MessageType LiveRoomMessageType `protobuf:"varint,2,opt,name=messageType,proto3,enum=live.LiveRoomMessageType" json:"messageType,omitempty"`
	// 消息发送者
	Send string `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	// 直播房间ID
	LiveRoomId string `protobuf:"bytes,4,opt,name=liveRoomId,proto3" json:"liveRoomId,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 发送时间
	SendTimestamp int64 `protobuf:"varint,6,opt,name=sendTimestamp,proto3" json:"sendTimestamp,omitempty"`
}

func (x *LiveRoomMessage) Reset() {
	*x = LiveRoomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoomMessage) ProtoMessage() {}

func (x *LiveRoomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoomMessage.ProtoReflect.Descriptor instead.
func (*LiveRoomMessage) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{13}
}

func (x *LiveRoomMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LiveRoomMessage) GetMessageType() LiveRoomMessageType {
	if x != nil {
		return x.MessageType
	}
	return LiveRoomMessageType_TextMessage
}

func (x *LiveRoomMessage) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *LiveRoomMessage) GetLiveRoomId() string {
	if x != nil {
		return x.LiveRoomId
	}
	return ""
}

func (x *LiveRoomMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LiveRoomMessage) GetSendTimestamp() int64 {
	if x != nil {
		return x.SendTimestamp
	}
	return 0
}

var File_live_proto protoreflect.FileDescriptor

var file_live_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x73, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x59, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x19,
	0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x5f, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x62, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x41, 0x64, 0x64,
	0x44, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x52,
	0x0a, 0x18, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a,
	0x1a, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x4f, 0x0a, 0x0e, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x65, 0x2a, 0x66, 0x0a, 0x13, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x51, 0x75, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x0c, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74,
	0x4f, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0e,
	0x4d, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc9,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc8, 0x01, 0x32, 0xec, 0x04, 0x0a, 0x07, 0x44, 0x61, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x6f, 0x1a, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x5a,
	0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x54, 0x0a, 0x14, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x6f, 0x1a, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f,
	0x12, 0x5c, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x20, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x1f, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x57,
	0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52,
	0x73, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x4f, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f,
	0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x6f, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x73, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x42, 0x36, 0x5a, 0x34, 0x62, 0x61, 0x62, 0x79, 0x2d,
	0x66, 0x72, 0x69, 0x65, 0x64, 0x2d, 0x72, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6b, 0x69, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_proto_rawDescOnce sync.Once
	file_live_proto_rawDescData = file_live_proto_rawDesc
)

func file_live_proto_rawDescGZIP() []byte {
	file_live_proto_rawDescOnce.Do(func() {
		file_live_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_proto_rawDescData)
	})
	return file_live_proto_rawDescData
}

var file_live_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_live_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_live_proto_goTypes = []interface{}{
	(LiveRoomStatus)(0),                // 0: live.LiveRoomStatus
	(LiveRoomUserOptType)(0),           // 1: live.LiveRoomUserOptType
	(LiveRoomMessageType)(0),           // 2: live.LiveRoomMessageType
	(*ReqLiveRoomQueryDao)(nil),        // 3: live.ReqLiveRoomQueryDao
	(*RspLiveRoomQueryDao)(nil),        // 4: live.RspLiveRoomQueryDao
	(*LiveRoom)(nil),                   // 5: live.LiveRoom
	(*ReqLiveRoomDetailQueryDao)(nil),  // 6: live.ReqLiveRoomDetailQueryDao
	(*RspLiveRoomDetailQueryDao)(nil),  // 7: live.RspLiveRoomDetailQueryDao
	(*ReqLiveRoomUserQueryDao)(nil),    // 8: live.ReqLiveRoomUserQueryDao
	(*RspLiveRoomUserQueryDao)(nil),    // 9: live.RspLiveRoomUserQueryDao
	(*ReqLiveRoomStatusUpdateDao)(nil), // 10: live.ReqLiveRoomStatusUpdateDao
	(*ReqLiveRoomUserOptAddDao)(nil),   // 11: live.ReqLiveRoomUserOptAddDao
	(*RspLiveRoomUserOptAddDao)(nil),   // 12: live.RspLiveRoomUserOptAddDao
	(*ReqLiveRoomMessageAddDao)(nil),   // 13: live.ReqLiveRoomMessageAddDao
	(*ReqLiveRoomMessageQueryDao)(nil), // 14: live.ReqLiveRoomMessageQueryDao
	(*RspLiveRoomMessageQueryDao)(nil), // 15: live.RspLiveRoomMessageQueryDao
	(*LiveRoomMessage)(nil),            // 16: live.LiveRoomMessage
	(*emptypb.Empty)(nil),              // 17: google.protobuf.Empty
}
var file_live_proto_depIdxs = []int32{
	0,  // 0: live.ReqLiveRoomQueryDao.status:type_name -> live.LiveRoomStatus
	5,  // 1: live.RspLiveRoomQueryDao.list:type_name -> live.LiveRoom
	0,  // 2: live.LiveRoom.status:type_name -> live.LiveRoomStatus
	0,  // 3: live.RspLiveRoomDetailQueryDao.status:type_name -> live.LiveRoomStatus
	0,  // 4: live.ReqLiveRoomStatusUpdateDao.status:type_name -> live.LiveRoomStatus
	1,  // 5: live.ReqLiveRoomUserOptAddDao.opt:type_name -> live.LiveRoomUserOptType
	2,  // 6: live.ReqLiveRoomMessageAddDao.messageType:type_name -> live.LiveRoomMessageType
	16, // 7: live.RspLiveRoomMessageQueryDao.list:type_name -> live.LiveRoomMessage
	2,  // 8: live.LiveRoomMessage.messageType:type_name -> live.LiveRoomMessageType
	3,  // 9: live.DaoLive.LiveRoomQueryDao:input_type -> live.ReqLiveRoomQueryDao
	6,  // 10: live.DaoLive.LiveRoomDetailQueryDao:input_type -> live.ReqLiveRoomDetailQueryDao
	8,  // 11: live.DaoLive.LiveRoomUserQueryDao:input_type -> live.ReqLiveRoomUserQueryDao
	10, // 12: live.DaoLive.LiveRoomStatusUpdateDao:input_type -> live.ReqLiveRoomStatusUpdateDao
	11, // 13: live.DaoLive.LiveRoomUserOptAddDao:input_type -> live.ReqLiveRoomUserOptAddDao
	13, // 14: live.DaoLive.LiveRoomMessageAddDao:input_type -> live.ReqLiveRoomMessageAddDao
	14, // 15: live.DaoLive.LiveRoomMessageQueryDao:input_type -> live.ReqLiveRoomMessageQueryDao
	4,  // 16: live.DaoLive.LiveRoomQueryDao:output_type -> live.RspLiveRoomQueryDao
	7,  // 17: live.DaoLive.LiveRoomDetailQueryDao:output_type -> live.RspLiveRoomDetailQueryDao
	9,  // 18: live.DaoLive.LiveRoomUserQueryDao:output_type -> live.RspLiveRoomUserQueryDao
	7,  // 19: live.DaoLive.LiveRoomStatusUpdateDao:output_type -> live.RspLiveRoomDetailQueryDao
	12, // 20: live.DaoLive.LiveRoomUserOptAddDao:output_type -> live.RspLiveRoomUserOptAddDao
	17, // 21: live.DaoLive.LiveRoomMessageAddDao:output_type -> google.protobuf.Empty
	15, // 22: live.DaoLive.LiveRoomMessageQueryDao:output_type -> live.RspLiveRoomMessageQueryDao
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_live_proto_init() }
func file_live_proto_init() {
	if File_live_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLiveRoomQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomDetailQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLiveRoomDetailQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomUserQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLiveRoomUserQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomStatusUpdateDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomUserOptAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLiveRoomUserOptAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomMessageAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLiveRoomMessageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLiveRoomMessageQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRoomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_live_proto_goTypes,
		DependencyIndexes: file_live_proto_depIdxs,
		EnumInfos:         file_live_proto_enumTypes,
		MessageInfos:      file_live_proto_msgTypes,
	}.Build()
	File_live_proto = out.File
	file_live_proto_rawDesc = nil
	file_live_proto_goTypes = nil
	file_live_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DaoLiveClient is the client API for DaoLive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaoLiveClient interface {
	// 查询直播房间列表
	LiveRoomQueryDao(ctx context.Context, in *ReqLiveRoomQueryDao, opts ...grpc.CallOption) (*RspLiveRoomQueryDao, error)
	// 查询直播房间详情
	LiveRoomDetailQueryDao(ctx context.Context, in *ReqLiveRoomDetailQueryDao, opts ...grpc.CallOption) (*RspLiveRoomDetailQueryDao, error)
	// 查询直播房间用户列表 (仅主播可查)
	LiveRoomUserQueryDao(ctx context.Context, in *ReqLiveRoomUserQueryDao, opts ...grpc.CallOption) (*RspLiveRoomUserQueryDao, error)
	// 更新直播房间状态 (主播上线、下线、禁言、关闭直播房间等)
	LiveRoomStatusUpdateDao(ctx context.Context, in *ReqLiveRoomStatusUpdateDao, opts ...grpc.CallOption) (*RspLiveRoomDetailQueryDao, error)
	// 直播房间用户操作添加 (用户进入、退出直播房间等)
	LiveRoomUserOptAddDao(ctx context.Context, in *ReqLiveRoomUserOptAddDao, opts ...grpc.CallOption) (*RspLiveRoomUserOptAddDao, error)
	// 直播房间用户消息发送
	LiveRoomMessageAddDao(ctx context.Context, in *ReqLiveRoomMessageAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 直播房间用户消息查询
	LiveRoomMessageQueryDao(ctx context.Context, in *ReqLiveRoomMessageQueryDao, opts ...grpc.CallOption) (*RspLiveRoomMessageQueryDao, error)
}

type daoLiveClient struct {
	cc grpc.ClientConnInterface
}

func NewDaoLiveClient(cc grpc.ClientConnInterface) DaoLiveClient {
	return &daoLiveClient{cc}
}

func (c *daoLiveClient) LiveRoomQueryDao(ctx context.Context, in *ReqLiveRoomQueryDao, opts ...grpc.CallOption) (*RspLiveRoomQueryDao, error) {
	out := new(RspLiveRoomQueryDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomDetailQueryDao(ctx context.Context, in *ReqLiveRoomDetailQueryDao, opts ...grpc.CallOption) (*RspLiveRoomDetailQueryDao, error) {
	out := new(RspLiveRoomDetailQueryDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomDetailQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomUserQueryDao(ctx context.Context, in *ReqLiveRoomUserQueryDao, opts ...grpc.CallOption) (*RspLiveRoomUserQueryDao, error) {
	out := new(RspLiveRoomUserQueryDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomUserQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomStatusUpdateDao(ctx context.Context, in *ReqLiveRoomStatusUpdateDao, opts ...grpc.CallOption) (*RspLiveRoomDetailQueryDao, error) {
	out := new(RspLiveRoomDetailQueryDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomStatusUpdateDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomUserOptAddDao(ctx context.Context, in *ReqLiveRoomUserOptAddDao, opts ...grpc.CallOption) (*RspLiveRoomUserOptAddDao, error) {
	out := new(RspLiveRoomUserOptAddDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomUserOptAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomMessageAddDao(ctx context.Context, in *ReqLiveRoomMessageAddDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomMessageAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoLiveClient) LiveRoomMessageQueryDao(ctx context.Context, in *ReqLiveRoomMessageQueryDao, opts ...grpc.CallOption) (*RspLiveRoomMessageQueryDao, error) {
	out := new(RspLiveRoomMessageQueryDao)
	err := c.cc.Invoke(ctx, "/live.DaoLive/LiveRoomMessageQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaoLiveServer is the server API for DaoLive service.
type DaoLiveServer interface {
	// 查询直播房间列表
	LiveRoomQueryDao(context.Context, *ReqLiveRoomQueryDao) (*RspLiveRoomQueryDao, error)
	// 查询直播房间详情
	LiveRoomDetailQueryDao(context.Context, *ReqLiveRoomDetailQueryDao) (*RspLiveRoomDetailQueryDao, error)
	// 查询直播房间用户列表 (仅主播可查)
	LiveRoomUserQueryDao(context.Context, *ReqLiveRoomUserQueryDao) (*RspLiveRoomUserQueryDao, error)
	// 更新直播房间状态 (主播上线、下线、禁言、关闭直播房间等)
	LiveRoomStatusUpdateDao(context.Context, *ReqLiveRoomStatusUpdateDao) (*RspLiveRoomDetailQueryDao, error)
	// 直播房间用户操作添加 (用户进入、退出直播房间等)
	LiveRoomUserOptAddDao(context.Context, *ReqLiveRoomUserOptAddDao) (*RspLiveRoomUserOptAddDao, error)
	// 直播房间用户消息发送
	LiveRoomMessageAddDao(context.Context, *ReqLiveRoomMessageAddDao) (*emptypb.Empty, error)
	// 直播房间用户消息查询
	LiveRoomMessageQueryDao(context.Context, *ReqLiveRoomMessageQueryDao) (*RspLiveRoomMessageQueryDao, error)
}

// UnimplementedDaoLiveServer can be embedded to have forward compatible implementations.
type UnimplementedDaoLiveServer struct {
}

func (*UnimplementedDaoLiveServer) LiveRoomQueryDao(context.Context, *ReqLiveRoomQueryDao) (*RspLiveRoomQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomQueryDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomDetailQueryDao(context.Context, *ReqLiveRoomDetailQueryDao) (*RspLiveRoomDetailQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomDetailQueryDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomUserQueryDao(context.Context, *ReqLiveRoomUserQueryDao) (*RspLiveRoomUserQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomUserQueryDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomStatusUpdateDao(context.Context, *ReqLiveRoomStatusUpdateDao) (*RspLiveRoomDetailQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomStatusUpdateDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomUserOptAddDao(context.Context, *ReqLiveRoomUserOptAddDao) (*RspLiveRoomUserOptAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomUserOptAddDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomMessageAddDao(context.Context, *ReqLiveRoomMessageAddDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomMessageAddDao not implemented")
}
func (*UnimplementedDaoLiveServer) LiveRoomMessageQueryDao(context.Context, *ReqLiveRoomMessageQueryDao) (*RspLiveRoomMessageQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomMessageQueryDao not implemented")
}

func RegisterDaoLiveServer(s *grpc.Server, srv DaoLiveServer) {
	s.RegisterService(&_DaoLive_serviceDesc, srv)
}

func _DaoLive_LiveRoomQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomQueryDao(ctx, req.(*ReqLiveRoomQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomDetailQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomDetailQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomDetailQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomDetailQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomDetailQueryDao(ctx, req.(*ReqLiveRoomDetailQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomUserQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomUserQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomUserQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomUserQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomUserQueryDao(ctx, req.(*ReqLiveRoomUserQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomStatusUpdateDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomStatusUpdateDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomStatusUpdateDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomStatusUpdateDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomStatusUpdateDao(ctx, req.(*ReqLiveRoomStatusUpdateDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomUserOptAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomUserOptAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomUserOptAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomUserOptAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomUserOptAddDao(ctx, req.(*ReqLiveRoomUserOptAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomMessageAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomMessageAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomMessageAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomMessageAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomMessageAddDao(ctx, req.(*ReqLiveRoomMessageAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoLive_LiveRoomMessageQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLiveRoomMessageQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoLiveServer).LiveRoomMessageQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.DaoLive/LiveRoomMessageQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoLiveServer).LiveRoomMessageQueryDao(ctx, req.(*ReqLiveRoomMessageQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaoLive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.DaoLive",
	HandlerType: (*DaoLiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiveRoomQueryDao",
			Handler:    _DaoLive_LiveRoomQueryDao_Handler,
		},
		{
			MethodName: "LiveRoomDetailQueryDao",
			Handler:    _DaoLive_LiveRoomDetailQueryDao_Handler,
		},
		{
			MethodName: "LiveRoomUserQueryDao",
			Handler:    _DaoLive_LiveRoomUserQueryDao_Handler,
		},
		{
			MethodName: "LiveRoomStatusUpdateDao",
			Handler:    _DaoLive_LiveRoomStatusUpdateDao_Handler,
		},
		{
			MethodName: "LiveRoomUserOptAddDao",
			Handler:    _DaoLive_LiveRoomUserOptAddDao_Handler,
		},
		{
			MethodName: "LiveRoomMessageAddDao",
			Handler:    _DaoLive_LiveRoomMessageAddDao_Handler,
		},
		{
			MethodName: "LiveRoomMessageQueryDao",
			Handler:    _DaoLive_LiveRoomMessageQueryDao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live.proto",
}
