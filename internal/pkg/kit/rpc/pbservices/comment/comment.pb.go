// proto 文件版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.14.0
// source: comment.proto

// 生成文件的包名

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BizType int32

const (
	BizType_Null      BizType = 0
	BizType_Space     BizType = 1
	BizType_Knowledge BizType = 2
	BizType_Blog      BizType = 3
)

// Enum value maps for BizType.
var (
	BizType_name = map[int32]string{
		0: "Null",
		1: "Space",
		2: "Knowledge",
		3: "Blog",
	}
	BizType_value = map[string]int32{
		"Null":      0,
		"Space":     1,
		"Knowledge": 2,
		"Blog":      3,
	}
)

func (x BizType) Enum() *BizType {
	p := new(BizType)
	*p = x
	return p
}

func (x BizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizType) Descriptor() protoreflect.EnumDescriptor {
	return file_comment_proto_enumTypes[0].Descriptor()
}

func (BizType) Type() protoreflect.EnumType {
	return &file_comment_proto_enumTypes[0]
}

func (x BizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BizType.Descriptor instead.
func (BizType) EnumDescriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

type OperatorType int32

const (
	// 默认
	OperatorType_Default OperatorType = 0
	// 点赞
	OperatorType_Like OperatorType = 1
	// 取消点赞
	OperatorType_CancelLike OperatorType = 2
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0: "Default",
		1: "Like",
		2: "CancelLike",
	}
	OperatorType_value = map[string]int32{
		"Default":    0,
		"Like":       1,
		"CancelLike": 2,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_comment_proto_enumTypes[1].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_comment_proto_enumTypes[1]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

// 浏览记录添加请求
type ReqVisitAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 浏览用户
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ReqVisitAddDao) Reset() {
	*x = ReqVisitAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqVisitAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqVisitAddDao) ProtoMessage() {}

func (x *ReqVisitAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqVisitAddDao.ProtoReflect.Descriptor instead.
func (*ReqVisitAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

func (x *ReqVisitAddDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqVisitAddDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqVisitAddDao) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// 浏览记录添加返回
type RspVisitAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 添加结果，true表示未访问已添加成功，false表示已访问添加重复
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspVisitAddDao) Reset() {
	*x = RspVisitAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspVisitAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspVisitAddDao) ProtoMessage() {}

func (x *RspVisitAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspVisitAddDao.ProtoReflect.Descriptor instead.
func (*RspVisitAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

func (x *RspVisitAddDao) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 评论添加
type ReqCommentAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 评论id
	CommentId string `protobuf:"bytes,3,opt,name=commentId,proto3" json:"commentId,omitempty"`
	// 上一级id
	ParentId string `protobuf:"bytes,4,opt,name=parentId,proto3" json:"parentId,omitempty"`
	// 评论楼层
	Floor int64 `protobuf:"varint,5,opt,name=floor,proto3" json:"floor,omitempty"`
	// 评论内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 评论者
	Origin string `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	// 是否匿名
	Anonymity bool `protobuf:"varint,8,opt,name=anonymity,proto3" json:"anonymity,omitempty"`
}

func (x *ReqCommentAddDao) Reset() {
	*x = ReqCommentAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentAddDao) ProtoMessage() {}

func (x *ReqCommentAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentAddDao.ProtoReflect.Descriptor instead.
func (*ReqCommentAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{2}
}

func (x *ReqCommentAddDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentAddDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqCommentAddDao) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *ReqCommentAddDao) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ReqCommentAddDao) GetFloor() int64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *ReqCommentAddDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReqCommentAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqCommentAddDao) GetAnonymity() bool {
	if x != nil {
		return x.Anonymity
	}
	return false
}

// 评论添加返回信息
type RspCommentAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 评论id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RspCommentAddDao) Reset() {
	*x = RspCommentAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCommentAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCommentAddDao) ProtoMessage() {}

func (x *RspCommentAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCommentAddDao.ProtoReflect.Descriptor instead.
func (*RspCommentAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{3}
}

func (x *RspCommentAddDao) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 评论信息
type CommentDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 评论id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// 评论内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 评论者
	Origin string `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	// 楼层
	Floor int64 `protobuf:"varint,7,opt,name=floor,proto3" json:"floor,omitempty"`
	// 评论时间
	CreateTimestamp int64 `protobuf:"varint,8,opt,name=createTimestamp,proto3" json:"createTimestamp,omitempty"`
	// 回复数
	ReplyTotal int64 `protobuf:"varint,9,opt,name=replyTotal,proto3" json:"replyTotal,omitempty"`
	// 点赞数
	LikeTotal int64 `protobuf:"varint,10,opt,name=likeTotal,proto3" json:"likeTotal,omitempty"`
	// 回复 默认只展示4条
	Reply []*CommentReplyDao `protobuf:"bytes,11,rep,name=reply,proto3" json:"reply,omitempty"`
	// 访问者是否已点赞
	OriginLiked bool `protobuf:"varint,12,opt,name=originLiked,proto3" json:"originLiked,omitempty"`
	// 是否匿名
	Anonymity bool `protobuf:"varint,13,opt,name=anonymity,proto3" json:"anonymity,omitempty"`
}

func (x *CommentDao) Reset() {
	*x = CommentDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentDao) ProtoMessage() {}

func (x *CommentDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentDao.ProtoReflect.Descriptor instead.
func (*CommentDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{4}
}

func (x *CommentDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *CommentDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *CommentDao) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *CommentDao) GetFloor() int64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *CommentDao) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *CommentDao) GetReplyTotal() int64 {
	if x != nil {
		return x.ReplyTotal
	}
	return 0
}

func (x *CommentDao) GetLikeTotal() int64 {
	if x != nil {
		return x.LikeTotal
	}
	return 0
}

func (x *CommentDao) GetReply() []*CommentReplyDao {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *CommentDao) GetOriginLiked() bool {
	if x != nil {
		return x.OriginLiked
	}
	return false
}

func (x *CommentDao) GetAnonymity() bool {
	if x != nil {
		return x.Anonymity
	}
	return false
}

// 评论回复列表查询请求
type ReqCommentReplyQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 回复上级id
	ParentId string `protobuf:"bytes,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	// 查询者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 页数 可选，默认值1
	Page int64 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// 页面条数 可选，默认值10
	PageSize int64 `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 评论楼层
	Floor int64 `protobuf:"varint,7,opt,name=floor,proto3" json:"floor,omitempty"`
	// 是否递归展示
	Recursion bool `protobuf:"varint,8,opt,name=recursion,proto3" json:"recursion,omitempty"`
}

func (x *ReqCommentReplyQueryDao) Reset() {
	*x = ReqCommentReplyQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentReplyQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentReplyQueryDao) ProtoMessage() {}

func (x *ReqCommentReplyQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentReplyQueryDao.ProtoReflect.Descriptor instead.
func (*ReqCommentReplyQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{5}
}

func (x *ReqCommentReplyQueryDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentReplyQueryDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqCommentReplyQueryDao) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ReqCommentReplyQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqCommentReplyQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqCommentReplyQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqCommentReplyQueryDao) GetFloor() int64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *ReqCommentReplyQueryDao) GetRecursion() bool {
	if x != nil {
		return x.Recursion
	}
	return false
}

// 评论回复列表查询返回
type RspCommentReplyQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*CommentReplyDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total    int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page     int64              `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64              `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RspCommentReplyQueryDao) Reset() {
	*x = RspCommentReplyQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCommentReplyQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCommentReplyQueryDao) ProtoMessage() {}

func (x *RspCommentReplyQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCommentReplyQueryDao.ProtoReflect.Descriptor instead.
func (*RspCommentReplyQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{6}
}

func (x *RspCommentReplyQueryDao) GetList() []*CommentReplyDao {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspCommentReplyQueryDao) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RspCommentReplyQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspCommentReplyQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 评论回复信息
type CommentReplyDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 评论id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 上一级id
	ParentId string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	// 评论内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 评论者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 评论时间
	CreateTimestamp int64 `protobuf:"varint,5,opt,name=createTimestamp,proto3" json:"createTimestamp,omitempty"`
	// 点赞数
	LikeTotal int64 `protobuf:"varint,6,opt,name=likeTotal,proto3" json:"likeTotal,omitempty"`
	// 回复
	Reply []*CommentReplyDao `protobuf:"bytes,7,rep,name=reply,proto3" json:"reply,omitempty"`
	// 访问者是否已点赞
	OriginLiked bool `protobuf:"varint,8,opt,name=originLiked,proto3" json:"originLiked,omitempty"`
	// 是否匿名
	Anonymity bool `protobuf:"varint,9,opt,name=anonymity,proto3" json:"anonymity,omitempty"`
}

func (x *CommentReplyDao) Reset() {
	*x = CommentReplyDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReplyDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReplyDao) ProtoMessage() {}

func (x *CommentReplyDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReplyDao.ProtoReflect.Descriptor instead.
func (*CommentReplyDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{7}
}

func (x *CommentReplyDao) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentReplyDao) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CommentReplyDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentReplyDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *CommentReplyDao) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *CommentReplyDao) GetLikeTotal() int64 {
	if x != nil {
		return x.LikeTotal
	}
	return 0
}

func (x *CommentReplyDao) GetReply() []*CommentReplyDao {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *CommentReplyDao) GetOriginLiked() bool {
	if x != nil {
		return x.OriginLiked
	}
	return false
}

func (x *CommentReplyDao) GetAnonymity() bool {
	if x != nil {
		return x.Anonymity
	}
	return false
}

// 个人评论列表查询请求
type ReqCommentPersonQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id 可选
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型 可选
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 操作者 必填
	Origin string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// 页数 可选，默认值1
	Page int64 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// 页面条数 可选，默认值10
	PageSize int64 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ReqCommentPersonQueryDao) Reset() {
	*x = ReqCommentPersonQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentPersonQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentPersonQueryDao) ProtoMessage() {}

func (x *ReqCommentPersonQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentPersonQueryDao.ProtoReflect.Descriptor instead.
func (*ReqCommentPersonQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{8}
}

func (x *ReqCommentPersonQueryDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentPersonQueryDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqCommentPersonQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqCommentPersonQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqCommentPersonQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 个人评论信息
type CommentPersonDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 评论id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// 评论内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 楼层
	Floor int64 `protobuf:"varint,7,opt,name=floor,proto3" json:"floor,omitempty"`
	// 评论时间
	CreateTimestamp int64 `protobuf:"varint,8,opt,name=createTimestamp,proto3" json:"createTimestamp,omitempty"`
	// 是否匿名
	Anonymity bool `protobuf:"varint,9,opt,name=anonymity,proto3" json:"anonymity,omitempty"`
}

func (x *CommentPersonDao) Reset() {
	*x = CommentPersonDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentPersonDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentPersonDao) ProtoMessage() {}

func (x *CommentPersonDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentPersonDao.ProtoReflect.Descriptor instead.
func (*CommentPersonDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{9}
}

func (x *CommentPersonDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *CommentPersonDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *CommentPersonDao) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentPersonDao) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentPersonDao) GetFloor() int64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *CommentPersonDao) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *CommentPersonDao) GetAnonymity() bool {
	if x != nil {
		return x.Anonymity
	}
	return false
}

// 个人评论列表查询返回
type RspCommentPersonQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*CommentPersonDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total    uint64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page     int64               `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64               `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RspCommentPersonQueryDao) Reset() {
	*x = RspCommentPersonQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCommentPersonQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCommentPersonQueryDao) ProtoMessage() {}

func (x *RspCommentPersonQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCommentPersonQueryDao.ProtoReflect.Descriptor instead.
func (*RspCommentPersonQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{10}
}

func (x *RspCommentPersonQueryDao) GetList() []*CommentPersonDao {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspCommentPersonQueryDao) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RspCommentPersonQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspCommentPersonQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 评论查询请求
type ReqCommentQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id 必填
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型 必填
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 操作者 必填
	Origin string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// 页数 可选，默认值1
	Page int64 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	// 页面条数 可选，默认值10
	PageSize int64 `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ReqCommentQueryDao) Reset() {
	*x = ReqCommentQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentQueryDao) ProtoMessage() {}

func (x *ReqCommentQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentQueryDao.ProtoReflect.Descriptor instead.
func (*ReqCommentQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{11}
}

func (x *ReqCommentQueryDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentQueryDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqCommentQueryDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqCommentQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqCommentQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 评论查询返回
type RspCommentQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*CommentDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total    int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page     int64         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64         `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RspCommentQueryDao) Reset() {
	*x = RspCommentQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCommentQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCommentQueryDao) ProtoMessage() {}

func (x *RspCommentQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCommentQueryDao.ProtoReflect.Descriptor instead.
func (*RspCommentQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{12}
}

func (x *RspCommentQueryDao) GetList() []*CommentDao {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspCommentQueryDao) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RspCommentQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspCommentQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 评论删除请求
type ReqCommentDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 评论id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// 操作者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *ReqCommentDeleteDao) Reset() {
	*x = ReqCommentDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentDeleteDao) ProtoMessage() {}

func (x *ReqCommentDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentDeleteDao.ProtoReflect.Descriptor instead.
func (*ReqCommentDeleteDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{13}
}

func (x *ReqCommentDeleteDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentDeleteDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqCommentDeleteDao) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReqCommentDeleteDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

// 评论删除返回
type RspCommentDeleteDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 影响行数，若评论下有子评论，则会一并删除
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RspCommentDeleteDao) Reset() {
	*x = RspCommentDeleteDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCommentDeleteDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCommentDeleteDao) ProtoMessage() {}

func (x *RspCommentDeleteDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCommentDeleteDao.ProtoReflect.Descriptor instead.
func (*RspCommentDeleteDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{14}
}

func (x *RspCommentDeleteDao) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 业务下的评论清空
type ReqCommentClearDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
}

func (x *ReqCommentClearDao) Reset() {
	*x = ReqCommentClearDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCommentClearDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCommentClearDao) ProtoMessage() {}

func (x *ReqCommentClearDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCommentClearDao.ProtoReflect.Descriptor instead.
func (*ReqCommentClearDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{15}
}

func (x *ReqCommentClearDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqCommentClearDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

// 操作请求
type ReqOperatorAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 操作的宿主id
	HostId string `protobuf:"bytes,3,opt,name=hostId,proto3" json:"hostId,omitempty"`
	// 操作者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 操作方式
	OptType OperatorType `protobuf:"varint,5,opt,name=optType,proto3,enum=comment.OperatorType" json:"optType,omitempty"`
}

func (x *ReqOperatorAddDao) Reset() {
	*x = ReqOperatorAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorAddDao) ProtoMessage() {}

func (x *ReqOperatorAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorAddDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{16}
}

func (x *ReqOperatorAddDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *ReqOperatorAddDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *ReqOperatorAddDao) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ReqOperatorAddDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqOperatorAddDao) GetOptType() OperatorType {
	if x != nil {
		return x.OptType
	}
	return OperatorType_Default
}

// 操作返回
type RspOperatorAddDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作结果
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RspOperatorAddDao) Reset() {
	*x = RspOperatorAddDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOperatorAddDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOperatorAddDao) ProtoMessage() {}

func (x *RspOperatorAddDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOperatorAddDao.ProtoReflect.Descriptor instead.
func (*RspOperatorAddDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{17}
}

func (x *RspOperatorAddDao) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 操作查询请求
type ReqOperatorQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64        `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Params   *OperatorDao `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ReqOperatorQueryDao) Reset() {
	*x = ReqOperatorQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOperatorQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOperatorQueryDao) ProtoMessage() {}

func (x *ReqOperatorQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOperatorQueryDao.ProtoReflect.Descriptor instead.
func (*ReqOperatorQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{18}
}

func (x *ReqOperatorQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqOperatorQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqOperatorQueryDao) GetParams() *OperatorDao {
	if x != nil {
		return x.Params
	}
	return nil
}

// 操作查询结果
type RspOperatorQueryDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*OperatorDao `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Page     int64          `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64          `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RspOperatorQueryDao) Reset() {
	*x = RspOperatorQueryDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOperatorQueryDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOperatorQueryDao) ProtoMessage() {}

func (x *RspOperatorQueryDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOperatorQueryDao.ProtoReflect.Descriptor instead.
func (*RspOperatorQueryDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{19}
}

func (x *RspOperatorQueryDao) GetList() []*OperatorDao {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspOperatorQueryDao) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RspOperatorQueryDao) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RspOperatorQueryDao) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OperatorDao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务id
	BizId string `protobuf:"bytes,1,opt,name=bizId,proto3" json:"bizId,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,2,opt,name=bizType,proto3,enum=comment.BizType" json:"bizType,omitempty"`
	// 操作的宿主id
	HostId string `protobuf:"bytes,3,opt,name=hostId,proto3" json:"hostId,omitempty"`
	// 操作者
	Origin string `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	// 操作方式
	OptType OperatorType `protobuf:"varint,5,opt,name=optType,proto3,enum=comment.OperatorType" json:"optType,omitempty"`
}

func (x *OperatorDao) Reset() {
	*x = OperatorDao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorDao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorDao) ProtoMessage() {}

func (x *OperatorDao) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorDao.ProtoReflect.Descriptor instead.
func (*OperatorDao) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{20}
}

func (x *OperatorDao) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *OperatorDao) GetBizType() BizType {
	if x != nil {
		return x.BizType
	}
	return BizType_Null
}

func (x *OperatorDao) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *OperatorDao) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *OperatorDao) GetOptType() OperatorType {
	if x != nil {
		return x.OptType
	}
	return OperatorType_Default
}

var File_comment_proto protoreflect.FileDescriptor

var file_comment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xf4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07,
	0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfe, 0x02, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x69, 0x7a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x22, 0xf3, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x22, 0xa4, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69,
	0x7a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x69, 0x74, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x2b, 0x0a,
	0x13, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x52,
	0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x73, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x13, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x37, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x67, 0x10,
	0x03, 0x2a, 0x35, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x02, 0x32, 0xce, 0x05, 0x0a, 0x0a, 0x44, 0x61, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x56, 0x69, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x1a,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x73, 0x70, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x6f, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12,
	0x4b, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x6f, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x5a, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x6f, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x4e, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6f, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61,
	0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x1a, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x44, 0x61, 0x6f, 0x12, 0x4e, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x1a, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x6f, 0x42, 0x39, 0x5a, 0x37, 0x62, 0x61, 0x62,
	0x79, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x64, 0x2d, 0x72, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6b, 0x69, 0x74, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comment_proto_rawDescOnce sync.Once
	file_comment_proto_rawDescData = file_comment_proto_rawDesc
)

func file_comment_proto_rawDescGZIP() []byte {
	file_comment_proto_rawDescOnce.Do(func() {
		file_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_comment_proto_rawDescData)
	})
	return file_comment_proto_rawDescData
}

var file_comment_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_comment_proto_goTypes = []interface{}{
	(BizType)(0),                     // 0: comment.BizType
	(OperatorType)(0),                // 1: comment.OperatorType
	(*ReqVisitAddDao)(nil),           // 2: comment.ReqVisitAddDao
	(*RspVisitAddDao)(nil),           // 3: comment.RspVisitAddDao
	(*ReqCommentAddDao)(nil),         // 4: comment.ReqCommentAddDao
	(*RspCommentAddDao)(nil),         // 5: comment.RspCommentAddDao
	(*CommentDao)(nil),               // 6: comment.CommentDao
	(*ReqCommentReplyQueryDao)(nil),  // 7: comment.ReqCommentReplyQueryDao
	(*RspCommentReplyQueryDao)(nil),  // 8: comment.RspCommentReplyQueryDao
	(*CommentReplyDao)(nil),          // 9: comment.CommentReplyDao
	(*ReqCommentPersonQueryDao)(nil), // 10: comment.ReqCommentPersonQueryDao
	(*CommentPersonDao)(nil),         // 11: comment.CommentPersonDao
	(*RspCommentPersonQueryDao)(nil), // 12: comment.RspCommentPersonQueryDao
	(*ReqCommentQueryDao)(nil),       // 13: comment.ReqCommentQueryDao
	(*RspCommentQueryDao)(nil),       // 14: comment.RspCommentQueryDao
	(*ReqCommentDeleteDao)(nil),      // 15: comment.ReqCommentDeleteDao
	(*RspCommentDeleteDao)(nil),      // 16: comment.RspCommentDeleteDao
	(*ReqCommentClearDao)(nil),       // 17: comment.ReqCommentClearDao
	(*ReqOperatorAddDao)(nil),        // 18: comment.ReqOperatorAddDao
	(*RspOperatorAddDao)(nil),        // 19: comment.RspOperatorAddDao
	(*ReqOperatorQueryDao)(nil),      // 20: comment.ReqOperatorQueryDao
	(*RspOperatorQueryDao)(nil),      // 21: comment.RspOperatorQueryDao
	(*OperatorDao)(nil),              // 22: comment.OperatorDao
	(*emptypb.Empty)(nil),            // 23: google.protobuf.Empty
}
var file_comment_proto_depIdxs = []int32{
	0,  // 0: comment.ReqVisitAddDao.bizType:type_name -> comment.BizType
	0,  // 1: comment.ReqCommentAddDao.bizType:type_name -> comment.BizType
	0,  // 2: comment.CommentDao.bizType:type_name -> comment.BizType
	9,  // 3: comment.CommentDao.reply:type_name -> comment.CommentReplyDao
	0,  // 4: comment.ReqCommentReplyQueryDao.bizType:type_name -> comment.BizType
	9,  // 5: comment.RspCommentReplyQueryDao.list:type_name -> comment.CommentReplyDao
	9,  // 6: comment.CommentReplyDao.reply:type_name -> comment.CommentReplyDao
	0,  // 7: comment.ReqCommentPersonQueryDao.bizType:type_name -> comment.BizType
	0,  // 8: comment.CommentPersonDao.bizType:type_name -> comment.BizType
	11, // 9: comment.RspCommentPersonQueryDao.list:type_name -> comment.CommentPersonDao
	0,  // 10: comment.ReqCommentQueryDao.bizType:type_name -> comment.BizType
	6,  // 11: comment.RspCommentQueryDao.list:type_name -> comment.CommentDao
	0,  // 12: comment.ReqCommentDeleteDao.bizType:type_name -> comment.BizType
	0,  // 13: comment.ReqCommentClearDao.bizType:type_name -> comment.BizType
	0,  // 14: comment.ReqOperatorAddDao.bizType:type_name -> comment.BizType
	1,  // 15: comment.ReqOperatorAddDao.optType:type_name -> comment.OperatorType
	22, // 16: comment.ReqOperatorQueryDao.params:type_name -> comment.OperatorDao
	22, // 17: comment.RspOperatorQueryDao.list:type_name -> comment.OperatorDao
	0,  // 18: comment.OperatorDao.bizType:type_name -> comment.BizType
	1,  // 19: comment.OperatorDao.optType:type_name -> comment.OperatorType
	2,  // 20: comment.DaoComment.VisitAddDao:input_type -> comment.ReqVisitAddDao
	4,  // 21: comment.DaoComment.CommentAddDao:input_type -> comment.ReqCommentAddDao
	13, // 22: comment.DaoComment.CommentQueryDao:input_type -> comment.ReqCommentQueryDao
	7,  // 23: comment.DaoComment.CommentReplyQueryDao:input_type -> comment.ReqCommentReplyQueryDao
	10, // 24: comment.DaoComment.CommentPersonQueryDao:input_type -> comment.ReqCommentPersonQueryDao
	15, // 25: comment.DaoComment.CommentDeleteDao:input_type -> comment.ReqCommentDeleteDao
	17, // 26: comment.DaoComment.CommentClearDao:input_type -> comment.ReqCommentClearDao
	18, // 27: comment.DaoComment.OperatorAddDao:input_type -> comment.ReqOperatorAddDao
	20, // 28: comment.DaoComment.OperatorQueryDao:input_type -> comment.ReqOperatorQueryDao
	3,  // 29: comment.DaoComment.VisitAddDao:output_type -> comment.RspVisitAddDao
	5,  // 30: comment.DaoComment.CommentAddDao:output_type -> comment.RspCommentAddDao
	14, // 31: comment.DaoComment.CommentQueryDao:output_type -> comment.RspCommentQueryDao
	8,  // 32: comment.DaoComment.CommentReplyQueryDao:output_type -> comment.RspCommentReplyQueryDao
	12, // 33: comment.DaoComment.CommentPersonQueryDao:output_type -> comment.RspCommentPersonQueryDao
	16, // 34: comment.DaoComment.CommentDeleteDao:output_type -> comment.RspCommentDeleteDao
	23, // 35: comment.DaoComment.CommentClearDao:output_type -> google.protobuf.Empty
	19, // 36: comment.DaoComment.OperatorAddDao:output_type -> comment.RspOperatorAddDao
	21, // 37: comment.DaoComment.OperatorQueryDao:output_type -> comment.RspOperatorQueryDao
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_comment_proto_init() }
func file_comment_proto_init() {
	if File_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqVisitAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspVisitAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCommentAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentReplyQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCommentReplyQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReplyDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentPersonQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentPersonDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCommentPersonQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCommentQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCommentDeleteDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCommentClearDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOperatorAddDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOperatorQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOperatorQueryDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorDao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comment_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_proto_goTypes,
		DependencyIndexes: file_comment_proto_depIdxs,
		EnumInfos:         file_comment_proto_enumTypes,
		MessageInfos:      file_comment_proto_msgTypes,
	}.Build()
	File_comment_proto = out.File
	file_comment_proto_rawDesc = nil
	file_comment_proto_goTypes = nil
	file_comment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DaoCommentClient is the client API for DaoComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaoCommentClient interface {
	// 浏览记录添加
	VisitAddDao(ctx context.Context, in *ReqVisitAddDao, opts ...grpc.CallOption) (*RspVisitAddDao, error)
	// 评论添加
	CommentAddDao(ctx context.Context, in *ReqCommentAddDao, opts ...grpc.CallOption) (*RspCommentAddDao, error)
	// 评论查询
	CommentQueryDao(ctx context.Context, in *ReqCommentQueryDao, opts ...grpc.CallOption) (*RspCommentQueryDao, error)
	// 评论回复列表查询
	CommentReplyQueryDao(ctx context.Context, in *ReqCommentReplyQueryDao, opts ...grpc.CallOption) (*RspCommentReplyQueryDao, error)
	// 个人评论查询
	CommentPersonQueryDao(ctx context.Context, in *ReqCommentPersonQueryDao, opts ...grpc.CallOption) (*RspCommentPersonQueryDao, error)
	// 删除评论
	CommentDeleteDao(ctx context.Context, in *ReqCommentDeleteDao, opts ...grpc.CallOption) (*RspCommentDeleteDao, error)
	// 业务下的评论清空（业务删除的时候调用）
	CommentClearDao(ctx context.Context, in *ReqCommentClearDao, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 操作添加 (点赞/取消点赞)
	OperatorAddDao(ctx context.Context, in *ReqOperatorAddDao, opts ...grpc.CallOption) (*RspOperatorAddDao, error)
	// 操作查询
	OperatorQueryDao(ctx context.Context, in *ReqOperatorQueryDao, opts ...grpc.CallOption) (*RspOperatorQueryDao, error)
}

type daoCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewDaoCommentClient(cc grpc.ClientConnInterface) DaoCommentClient {
	return &daoCommentClient{cc}
}

func (c *daoCommentClient) VisitAddDao(ctx context.Context, in *ReqVisitAddDao, opts ...grpc.CallOption) (*RspVisitAddDao, error) {
	out := new(RspVisitAddDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/VisitAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentAddDao(ctx context.Context, in *ReqCommentAddDao, opts ...grpc.CallOption) (*RspCommentAddDao, error) {
	out := new(RspCommentAddDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentQueryDao(ctx context.Context, in *ReqCommentQueryDao, opts ...grpc.CallOption) (*RspCommentQueryDao, error) {
	out := new(RspCommentQueryDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentReplyQueryDao(ctx context.Context, in *ReqCommentReplyQueryDao, opts ...grpc.CallOption) (*RspCommentReplyQueryDao, error) {
	out := new(RspCommentReplyQueryDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentReplyQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentPersonQueryDao(ctx context.Context, in *ReqCommentPersonQueryDao, opts ...grpc.CallOption) (*RspCommentPersonQueryDao, error) {
	out := new(RspCommentPersonQueryDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentPersonQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentDeleteDao(ctx context.Context, in *ReqCommentDeleteDao, opts ...grpc.CallOption) (*RspCommentDeleteDao, error) {
	out := new(RspCommentDeleteDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentDeleteDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) CommentClearDao(ctx context.Context, in *ReqCommentClearDao, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/CommentClearDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) OperatorAddDao(ctx context.Context, in *ReqOperatorAddDao, opts ...grpc.CallOption) (*RspOperatorAddDao, error) {
	out := new(RspOperatorAddDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/OperatorAddDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoCommentClient) OperatorQueryDao(ctx context.Context, in *ReqOperatorQueryDao, opts ...grpc.CallOption) (*RspOperatorQueryDao, error) {
	out := new(RspOperatorQueryDao)
	err := c.cc.Invoke(ctx, "/comment.DaoComment/OperatorQueryDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaoCommentServer is the server API for DaoComment service.
type DaoCommentServer interface {
	// 浏览记录添加
	VisitAddDao(context.Context, *ReqVisitAddDao) (*RspVisitAddDao, error)
	// 评论添加
	CommentAddDao(context.Context, *ReqCommentAddDao) (*RspCommentAddDao, error)
	// 评论查询
	CommentQueryDao(context.Context, *ReqCommentQueryDao) (*RspCommentQueryDao, error)
	// 评论回复列表查询
	CommentReplyQueryDao(context.Context, *ReqCommentReplyQueryDao) (*RspCommentReplyQueryDao, error)
	// 个人评论查询
	CommentPersonQueryDao(context.Context, *ReqCommentPersonQueryDao) (*RspCommentPersonQueryDao, error)
	// 删除评论
	CommentDeleteDao(context.Context, *ReqCommentDeleteDao) (*RspCommentDeleteDao, error)
	// 业务下的评论清空（业务删除的时候调用）
	CommentClearDao(context.Context, *ReqCommentClearDao) (*emptypb.Empty, error)
	// 操作添加 (点赞/取消点赞)
	OperatorAddDao(context.Context, *ReqOperatorAddDao) (*RspOperatorAddDao, error)
	// 操作查询
	OperatorQueryDao(context.Context, *ReqOperatorQueryDao) (*RspOperatorQueryDao, error)
}

// UnimplementedDaoCommentServer can be embedded to have forward compatible implementations.
type UnimplementedDaoCommentServer struct {
}

func (*UnimplementedDaoCommentServer) VisitAddDao(context.Context, *ReqVisitAddDao) (*RspVisitAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitAddDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentAddDao(context.Context, *ReqCommentAddDao) (*RspCommentAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAddDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentQueryDao(context.Context, *ReqCommentQueryDao) (*RspCommentQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentQueryDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentReplyQueryDao(context.Context, *ReqCommentReplyQueryDao) (*RspCommentReplyQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplyQueryDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentPersonQueryDao(context.Context, *ReqCommentPersonQueryDao) (*RspCommentPersonQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPersonQueryDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentDeleteDao(context.Context, *ReqCommentDeleteDao) (*RspCommentDeleteDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDeleteDao not implemented")
}
func (*UnimplementedDaoCommentServer) CommentClearDao(context.Context, *ReqCommentClearDao) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentClearDao not implemented")
}
func (*UnimplementedDaoCommentServer) OperatorAddDao(context.Context, *ReqOperatorAddDao) (*RspOperatorAddDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorAddDao not implemented")
}
func (*UnimplementedDaoCommentServer) OperatorQueryDao(context.Context, *ReqOperatorQueryDao) (*RspOperatorQueryDao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorQueryDao not implemented")
}

func RegisterDaoCommentServer(s *grpc.Server, srv DaoCommentServer) {
	s.RegisterService(&_DaoComment_serviceDesc, srv)
}

func _DaoComment_VisitAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVisitAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).VisitAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/VisitAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).VisitAddDao(ctx, req.(*ReqVisitAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentAddDao(ctx, req.(*ReqCommentAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentQueryDao(ctx, req.(*ReqCommentQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentReplyQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentReplyQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentReplyQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentReplyQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentReplyQueryDao(ctx, req.(*ReqCommentReplyQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentPersonQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentPersonQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentPersonQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentPersonQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentPersonQueryDao(ctx, req.(*ReqCommentPersonQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentDeleteDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentDeleteDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentDeleteDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentDeleteDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentDeleteDao(ctx, req.(*ReqCommentDeleteDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_CommentClearDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentClearDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).CommentClearDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/CommentClearDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).CommentClearDao(ctx, req.(*ReqCommentClearDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_OperatorAddDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorAddDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).OperatorAddDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/OperatorAddDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).OperatorAddDao(ctx, req.(*ReqOperatorAddDao))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaoComment_OperatorQueryDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOperatorQueryDao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoCommentServer).OperatorQueryDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.DaoComment/OperatorQueryDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoCommentServer).OperatorQueryDao(ctx, req.(*ReqOperatorQueryDao))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaoComment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.DaoComment",
	HandlerType: (*DaoCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VisitAddDao",
			Handler:    _DaoComment_VisitAddDao_Handler,
		},
		{
			MethodName: "CommentAddDao",
			Handler:    _DaoComment_CommentAddDao_Handler,
		},
		{
			MethodName: "CommentQueryDao",
			Handler:    _DaoComment_CommentQueryDao_Handler,
		},
		{
			MethodName: "CommentReplyQueryDao",
			Handler:    _DaoComment_CommentReplyQueryDao_Handler,
		},
		{
			MethodName: "CommentPersonQueryDao",
			Handler:    _DaoComment_CommentPersonQueryDao_Handler,
		},
		{
			MethodName: "CommentDeleteDao",
			Handler:    _DaoComment_CommentDeleteDao_Handler,
		},
		{
			MethodName: "CommentClearDao",
			Handler:    _DaoComment_CommentClearDao_Handler,
		},
		{
			MethodName: "OperatorAddDao",
			Handler:    _DaoComment_OperatorAddDao_Handler,
		},
		{
			MethodName: "OperatorQueryDao",
			Handler:    _DaoComment_OperatorQueryDao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
